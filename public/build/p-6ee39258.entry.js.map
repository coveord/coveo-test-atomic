{"version":3,"names":["atomicPagerCss","AtomicPagerStyle0","AtomicPager","this","numberOfPages","previousButtonIcon","ArrowLeftIcon","nextButtonIcon","ArrowRightIcon","radioGroupName","randomID","initialize","searchStatus","buildSearchStatus","bindings","engine","pager","buildPager","options","render","h","PagerGuard","key","searchStatusState","isAppLoaded","store","PagerNavigation","i18n","PagerPreviousButton","icon","disabled","pagerState","hasPreviousPage","onClick","previousPage","focusOnFirstResultAndScrollToTop","PagerPageButtons","currentPages","map","pageNumber","PagerPageButton","isSelected","isCurrentPage","ariaLabel","t","onChecked","selectPage","page","groupName","ref","el","focusTarget","setTarget","text","toLocaleString","language","PagerNextButton","hasNextPage","nextPage","_a","state","resultList","focusOnFirstResultAfterNextSearch","scrollToTopEvent","emit","activePage","FocusTargetController","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/search/atomic-pager/atomic-pager.pcss?tag=atomic-pager&encapsulation=shadow","src/components/search/atomic-pager/atomic-pager.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n","import {\n  buildPager,\n  buildSearchStatus,\n  Pager,\n  PagerState,\n  SearchStatus,\n  SearchStatusState,\n} from '@coveo/headless';\nimport {Component, Event, EventEmitter, h, Prop, State} from '@stencil/core';\nimport ArrowLeftIcon from '../../../images/arrow-left-rounded.svg';\nimport ArrowRightIcon from '../../../images/arrow-right-rounded.svg';\nimport {FocusTargetController} from '../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {randomID} from '../../../utils/utils';\nimport {\n  PagerNextButton,\n  PagerPageButton,\n  PagerPageButtons,\n  PagerPreviousButton,\n} from '../../common/pager/pager-buttons';\nimport {PagerGuard} from '../../common/pager/pager-guard';\nimport {PagerNavigation} from '../../common/pager/pager-navigation';\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-pager` provides buttons that allow the end user to navigate through the different result pages.\n *\n * @part buttons - The list of the next/previous buttons and page-buttons.\n * @part page-buttons - The list of page buttons.\n * @part page-button - The page button.\n * @part active-page-button - The active page button.\n * @part previous-button - The previous button.\n * @part next-button - The next button.\n * @part previous-button-icon - Icon of the previous button.\n * @part next-button-icon - Icon of the next button.\n */\n@Component({\n  tag: 'atomic-pager',\n  styleUrl: 'atomic-pager.pcss',\n  shadow: true,\n})\nexport class AtomicPager implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public pager!: Pager;\n  public searchStatus!: SearchStatus;\n\n  @BindStateToController('pager')\n  @State()\n  public pagerState!: PagerState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: SearchStatusState;\n  @State() error!: Error;\n\n  @Event({\n    eventName: 'atomic/scrollToTop',\n  })\n  private scrollToTopEvent!: EventEmitter;\n\n  /**\n   * Specifies how many page buttons to display in the pager.\n   */\n  @Prop({reflect: true}) numberOfPages = 5;\n\n  /**\n   * The SVG icon to use to display the Previous button.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   */\n  @Prop({reflect: true}) previousButtonIcon: string = ArrowLeftIcon;\n\n  /**\n   * The SVG icon to use to display the Next button.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   */\n  @Prop({reflect: true}) nextButtonIcon: string = ArrowRightIcon;\n\n  private activePage?: FocusTargetController;\n  private radioGroupName = randomID('atomic-pager-');\n\n  public initialize() {\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n    this.pager = buildPager(this.bindings.engine, {\n      options: {numberOfPages: this.numberOfPages},\n    });\n  }\n\n  public render() {\n    return (\n      <PagerGuard\n        {...this.searchStatusState}\n        isAppLoaded={this.bindings.store.isAppLoaded()}\n      >\n        <PagerNavigation i18n={this.bindings.i18n}>\n          <PagerPreviousButton\n            icon={this.previousButtonIcon}\n            disabled={!this.pagerState.hasPreviousPage}\n            i18n={this.bindings.i18n}\n            onClick={() => {\n              this.pager.previousPage();\n              this.focusOnFirstResultAndScrollToTop();\n            }}\n          />\n          <PagerPageButtons i18n={this.bindings.i18n}>\n            {this.pagerState.currentPages.map((pageNumber) => {\n              return (\n                <PagerPageButton\n                  isSelected={this.pager.isCurrentPage(pageNumber)}\n                  ariaLabel={this.bindings.i18n.t('page-number', {pageNumber})}\n                  onChecked={() => {\n                    this.pager.selectPage(pageNumber);\n                    this.focusOnFirstResultAndScrollToTop();\n                  }}\n                  page={pageNumber}\n                  groupName={this.radioGroupName}\n                  ref={(el) => {\n                    const isSelected = this.pager.isCurrentPage(pageNumber);\n                    if (isSelected && el) {\n                      this.focusTarget.setTarget(el);\n                    }\n                  }}\n                  text={pageNumber.toLocaleString(this.bindings.i18n.language)}\n                />\n              );\n            })}\n          </PagerPageButtons>\n          <PagerNextButton\n            icon={this.nextButtonIcon}\n            disabled={!this.pagerState.hasNextPage}\n            i18n={this.bindings.i18n}\n            onClick={() => {\n              this.pager.nextPage();\n              this.focusOnFirstResultAndScrollToTop();\n            }}\n          />\n        </PagerNavigation>\n      </PagerGuard>\n    );\n  }\n\n  private async focusOnFirstResultAndScrollToTop() {\n    await this.bindings.store.state.resultList?.focusOnFirstResultAfterNextSearch();\n    this.scrollToTopEvent.emit();\n  }\n\n  private get focusTarget() {\n    if (!this.activePage) {\n      this.activePage = new FocusTargetController(this);\n    }\n    return this.activePage;\n  }\n}\n"],"mappings":"kgBAAA,MAAMA,EAAiB,wguCACvB,MAAAC,EAAeD,E,iXC4CFE,EAAW,M,8EAqBCC,KAAAC,cAAgB,EAShBD,KAAAE,mBAA6BC,EAS7BH,KAAAI,eAAyBC,EAGxCL,KAAAM,eAAiBC,EAAS,iB,mGArBK,E,wBASaJ,E,oBASJE,C,CAKzC,UAAAG,GACLR,KAAKS,aAAeC,EAAkBV,KAAKW,SAASC,QACpDZ,KAAKa,MAAQC,EAAWd,KAAKW,SAASC,OAAQ,CAC5CG,QAAS,CAACd,cAAeD,KAAKC,gB,CAI3B,MAAAe,GACL,OACEC,EAACC,EAAU,CAAAC,IAAA,8CACLnB,KAAKoB,kBACTC,YAAarB,KAAKW,SAASW,MAAMD,eAEjCJ,EAACM,EAAe,CAAAJ,IAAA,2CAACK,KAAMxB,KAAKW,SAASa,MACnCP,EAACQ,EAAmB,CAAAN,IAAA,2CAClBO,KAAM1B,KAAKE,mBACXyB,UAAW3B,KAAK4B,WAAWC,gBAC3BL,KAAMxB,KAAKW,SAASa,KACpBM,QAAS,KACP9B,KAAKa,MAAMkB,eACX/B,KAAKgC,kCAAkC,IAG3Cf,EAACgB,EAAgB,CAAAd,IAAA,2CAACK,KAAMxB,KAAKW,SAASa,MACnCxB,KAAK4B,WAAWM,aAAaC,KAAKC,GAE/BnB,EAACoB,EAAe,CACdC,WAAYtC,KAAKa,MAAM0B,cAAcH,GACrCI,UAAWxC,KAAKW,SAASa,KAAKiB,EAAE,cAAe,CAACL,eAChDM,UAAW,KACT1C,KAAKa,MAAM8B,WAAWP,GACtBpC,KAAKgC,kCAAkC,EAEzCY,KAAMR,EACNS,UAAW7C,KAAKM,eAChBwC,IAAMC,IACJ,MAAMT,EAAatC,KAAKa,MAAM0B,cAAcH,GAC5C,GAAIE,GAAcS,EAAI,CACpB/C,KAAKgD,YAAYC,UAAUF,E,GAG/BG,KAAMd,EAAWe,eAAenD,KAAKW,SAASa,KAAK4B,eAK3DnC,EAACoC,EAAe,CAAAlC,IAAA,2CACdO,KAAM1B,KAAKI,eACXuB,UAAW3B,KAAK4B,WAAW0B,YAC3B9B,KAAMxB,KAAKW,SAASa,KACpBM,QAAS,KACP9B,KAAKa,MAAM0C,WACXvD,KAAKgC,kCAAkC,K,CAQ3C,sCAAMA,G,aACNwB,EAAAxD,KAAKW,SAASW,MAAMmC,MAAMC,cAAU,MAAAF,SAAA,SAAAA,EAAEG,qCAC5C3D,KAAK4D,iBAAiBC,M,CAGxB,eAAYb,GACV,IAAKhD,KAAK8D,WAAY,CACpB9D,KAAK8D,WAAa,IAAIC,EAAsB/D,K,CAE9C,OAAOA,KAAK8D,U,GAhHeE,EAAA,CAA5BC,K,+BAMMD,EAAA,CAFNE,EAAsB,U,iCAKhBF,EAAA,CAFNE,EAAsB,iB"}