{"version":3,"names":["AtomicResultText","this","shouldHighlight","render","resultValueAsString","getStringValueFromResultOrNull","result","field","h","ItemTextFallback","host","logger","bindings","engine","defaultValue","default","item","getProperty","ResultTemplatesHelpers","getResultProperty","value","getFieldValueCaption","i18n","textValue","highlightKeywords","ItemTextHighlighted","highlightString","HighlightUtils","onError","error","__decorate","InitializeBindings","ResultContext","AtomicText","strings","t","count","connectedCallback","Error"],"sources":["src/components/search/result-template-components/atomic-result-text/atomic-result-text.tsx","src/components/search/atomic-text/atomic-text.tsx"],"sourcesContent":["import {HighlightUtils, Result, ResultTemplatesHelpers} from '@coveo/headless';\nimport {Component, Prop, h, Element, State} from '@stencil/core';\nimport {getFieldValueCaption} from '../../../../utils/field-utils';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {getStringValueFromResultOrNull} from '../../../../utils/result-utils';\nimport {ItemTextFallback} from '../../../common/item-text/item-text-fallback';\nimport {ItemTextHighlighted} from '../../../common/item-text/item-text-highlighted';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\nimport {ResultContext} from '../result-template-decorators';\n\n/**\n * The `atomic-result-text` component renders the value of a string result field.\n */\n@Component({\n  tag: 'atomic-result-text',\n  shadow: false,\n})\nexport class AtomicResultText implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  @ResultContext() private result!: Result;\n\n  @Element() private host!: HTMLElement;\n\n  @State() public error!: Error;\n\n  /**\n   * The result field which the component should use.\n   * This will look in the Result object first, and then in the Result.raw object for the fields.\n   * It is important to include the necessary field in the `atomic-search-interface` component.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * When this is set to `true`, the component attempts to highlight text based on the highlighting properties provided by the search API response.\n   */\n  @Prop({reflect: true}) public shouldHighlight = true;\n\n  /**\n   * The locale key for the text to display when the configured field has no value.\n   */\n  @Prop({reflect: true}) public default?: string;\n\n  public render() {\n    const resultValueAsString = getStringValueFromResultOrNull(\n      this.result,\n      this.field\n    );\n\n    if (resultValueAsString === null) {\n      return (\n        <ItemTextFallback\n          field={this.field}\n          host={this.host}\n          logger={this.bindings.engine.logger}\n          defaultValue={this.default}\n          item={this.result}\n          getProperty={ResultTemplatesHelpers.getResultProperty}\n        >\n          <atomic-text\n            value={getFieldValueCaption(\n              this.field,\n              this.default!,\n              this.bindings.i18n\n            )}\n          ></atomic-text>\n        </ItemTextFallback>\n      );\n    }\n\n    const textValue = `${resultValueAsString}`;\n    const highlightKeywords = ResultTemplatesHelpers.getResultProperty(\n      this.result,\n      `${this.field}Highlights`\n    ) as HighlightUtils.HighlightKeyword[];\n\n    return this.shouldHighlight && highlightKeywords ? (\n      <ItemTextHighlighted\n        textValue={textValue}\n        highlightKeywords={highlightKeywords}\n        highlightString={HighlightUtils.highlightString}\n        onError={(error) => (this.error = error)}\n      ></ItemTextHighlighted>\n    ) : (\n      getFieldValueCaption(this.field, textValue, this.bindings.i18n)\n    );\n  }\n}\n","import {Component, Prop, State} from '@stencil/core';\nimport {\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-text` component leverages the I18n translation module through the atomic-search-interface.\n */\n@Component({\n  tag: 'atomic-text',\n  shadow: true,\n})\nexport class AtomicText implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n\n  private strings = {\n    value: () =>\n      this.bindings.i18n.t(this.value, {\n        count: this.count,\n      }),\n  };\n  @State() public error!: Error;\n\n  /**\n   * The string key value.\n   */\n  @Prop({reflect: true}) public value!: string;\n  /**\n   * The count value used for plurals.\n   */\n  @Prop({reflect: true}) public count?: number;\n\n  public connectedCallback() {\n    if (!this.value) {\n      this.error = new Error('The \"value\" attribute must be defined.');\n    }\n  }\n\n  public render() {\n    return this.strings.value();\n  }\n}\n"],"mappings":"4vBAoBaA,EAAgB,M,yBAiBGC,KAAAC,gBAAkB,K,+DAAA,K,uBAOzC,MAAAC,GACL,MAAMC,EAAsBC,EAC1BJ,KAAKK,OACLL,KAAKM,OAGP,GAAIH,IAAwB,KAAM,CAChC,OACEI,EAACC,EAAgB,CACfF,MAAON,KAAKM,MACZG,KAAMT,KAAKS,KACXC,OAAQV,KAAKW,SAASC,OAAOF,OAC7BG,aAAcb,KAAKc,QACnBC,KAAMf,KAAKK,OACXW,YAAaC,EAAuBC,mBAEpCX,EAAA,eACEY,MAAOC,EACLpB,KAAKM,MACLN,KAAKc,QACLd,KAAKW,SAASU,Q,CAOxB,MAAMC,EAAY,GAAGnB,IACrB,MAAMoB,EAAoBN,EAAuBC,kBAC/ClB,KAAKK,OACL,GAAGL,KAAKM,mBAGV,OAAON,KAAKC,iBAAmBsB,EAC7BhB,EAACiB,EAAmB,CAClBF,UAAWA,EACXC,kBAAmBA,EACnBE,gBAAiBC,EAAeD,gBAChCE,QAAUC,GAAW5B,KAAK4B,MAAQA,IAGpCR,EAAqBpB,KAAKM,MAAOgB,EAAWtB,KAAKW,SAASU,K,6BAhEjCQ,GAA5BC,K,+BACwBD,GAAxBE,K,8YCRUC,EAAU,M,yBAGbhC,KAAAiC,QAAU,CAChBd,MAAO,IACLnB,KAAKW,SAASU,KAAKa,EAAElC,KAAKmB,MAAO,CAC/BgB,MAAOnC,KAAKmC,S,+DAcX,iBAAAC,GACL,IAAKpC,KAAKmB,MAAO,CACfnB,KAAK4B,MAAQ,IAAIS,MAAM,yC,EAIpB,MAAAnC,GACL,OAAOF,KAAKiC,QAAQd,O,GA1BOU,EAAA,CAA5BC,K"}