{"version":3,"names":["atomicCommerceSortDropdownCss","AtomicCommerceSortDropdownStyle0","AtomicCommerceSortDropdown","this","id","randomID","initialize","bindings","interfaceElement","type","searchOrListing","buildProductListing","engine","buildSearch","sort","select","e","composedPath","sortBy","getSortByLabel","value","sortState","availableSorts","render","error","responseId","products","searchOrListingState","i18n","h","SortGuard","key","firstSearchExecuted","hasError","hasResults","length","SortContainer","SortLabel","SortSelect","onSelect","evt","map","CommerceSortOption","selected","isSortedBy","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/commerce/atomic-commerce-sort-dropdown/atomic-commerce-sort-dropdown.pcss?tag=atomic-commerce-sort-dropdown&encapsulation=shadow","src/components/commerce/atomic-commerce-sort-dropdown/atomic-commerce-sort-dropdown.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n\nselect:hover + div,\nselect:focus-visible + div {\n  @apply border-primary-light text-primary-light;\n}\n","import {\n  Sort,\n  SortState,\n  Search,\n  ProductListing,\n  buildProductListing,\n  buildSearch,\n  SearchState,\n  ProductListingState,\n} from '@coveo/headless/commerce';\nimport {Component, h, State, Element} from '@stencil/core';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {randomID} from '../../../utils/utils';\nimport {SortContainer} from '../../common/sort/container';\nimport {SortGuard} from '../../common/sort/guard';\nimport {SortLabel} from '../../common/sort/label';\nimport {SortSelect} from '../../common/sort/select';\nimport {CommerceBindings} from '../atomic-commerce-interface/atomic-commerce-interface';\nimport {CommerceSortOption, getSortByLabel} from '../sort/option';\n\n/**\n * The `atomic-commerce-sort-dropdown` component renders a dropdown that the end user can interact with to select the criteria to use when sorting products.\n *\n * @part label - The \"Sort by\" label of the `<select>` element.\n * @part select-parent - The `<select>` element parent.\n * @part select - The `<select>` element of the dropdown list.\n * @part select-separator - The element separating the select from the icon.\n * @part placeholder - The dropdown placeholder for while the interface is initializing.\n *\n * @internal\n */\n@Component({\n  tag: 'atomic-commerce-sort-dropdown',\n  styleUrl: 'atomic-commerce-sort-dropdown.pcss',\n  shadow: true,\n})\nexport class AtomicCommerceSortDropdown\n  implements InitializableComponent<CommerceBindings>\n{\n  @InitializeBindings() public bindings!: CommerceBindings;\n\n  private id = randomID('atomic-commerce-sort-dropdown-');\n\n  @Element() host!: HTMLElement;\n\n  public sort!: Sort;\n  @BindStateToController('sort')\n  @State()\n  public sortState!: SortState;\n\n  public searchOrListing!: Search | ProductListing;\n  @BindStateToController('searchOrListing')\n  @State()\n  private searchOrListingState!: SearchState | ProductListingState;\n\n  @State() public error!: Error;\n\n  public initialize() {\n    if (this.bindings.interfaceElement.type === 'product-listing') {\n      this.searchOrListing = buildProductListing(this.bindings.engine);\n    } else {\n      this.searchOrListing = buildSearch(this.bindings.engine);\n    }\n    this.sort = this.searchOrListing.sort();\n  }\n\n  private select(e: Event) {\n    const select = e.composedPath()[0] as HTMLSelectElement;\n    this.sort.sortBy(\n      getSortByLabel(select.value, this.sortState.availableSorts)\n    );\n  }\n\n  public render() {\n    const {error, responseId, products} = this.searchOrListingState;\n    const {\n      bindings: {i18n},\n      id,\n    } = this;\n    return (\n      <SortGuard\n        firstSearchExecuted={responseId !== ''}\n        hasError={error !== null}\n        hasResults={\n          products.length > 0 && this.sortState.availableSorts.length > 1\n        }\n      >\n        <SortContainer>\n          <SortLabel i18n={i18n} id={id} />\n          <SortSelect i18n={i18n} id={id} onSelect={(evt) => this.select(evt)}>\n            {this.sortState.availableSorts.map((sort) => (\n              <CommerceSortOption\n                i18n={i18n}\n                selected={this.sort.isSortedBy(sort)}\n                sort={sort}\n              />\n            ))}\n          </SortSelect>\n        </SortContainer>\n      </SortGuard>\n    );\n  }\n}\n"],"mappings":"2WAAA,MAAMA,EAAgC,8yuCACtC,MAAAC,EAAeD,E,iXCuCFE,EAA0B,M,yBAK7BC,KAAAC,GAAKC,EAAS,kC,kFAgBf,UAAAC,GACL,GAAIH,KAAKI,SAASC,iBAAiBC,OAAS,kBAAmB,CAC7DN,KAAKO,gBAAkBC,EAAoBR,KAAKI,SAASK,O,KACpD,CACLT,KAAKO,gBAAkBG,EAAYV,KAAKI,SAASK,O,CAEnDT,KAAKW,KAAOX,KAAKO,gBAAgBI,M,CAG3B,MAAAC,CAAOC,GACb,MAAMD,EAASC,EAAEC,eAAe,GAChCd,KAAKW,KAAKI,OACRC,EAAeJ,EAAOK,MAAOjB,KAAKkB,UAAUC,gB,CAIzC,MAAAC,GACL,MAAMC,MAACA,EAAKC,WAAEA,EAAUC,SAAEA,GAAYvB,KAAKwB,qBAC3C,MACEpB,UAAUqB,KAACA,GAAKxB,GAChBA,GACED,KACJ,OACE0B,EAACC,EAAS,CAAAC,IAAA,2CACRC,oBAAqBP,IAAe,GACpCQ,SAAUT,IAAU,KACpBU,WACER,EAASS,OAAS,GAAKhC,KAAKkB,UAAUC,eAAea,OAAS,GAGhEN,EAACO,EAAa,CAAAL,IAAA,4CACZF,EAACQ,EAAS,CAAAN,IAAA,2CAACH,KAAMA,EAAMxB,GAAIA,IAC3ByB,EAACS,EAAU,CAAAP,IAAA,2CAACH,KAAMA,EAAMxB,GAAIA,EAAImC,SAAWC,GAAQrC,KAAKY,OAAOyB,IAC5DrC,KAAKkB,UAAUC,eAAemB,KAAK3B,GAClCe,EAACa,EAAkB,CACjBd,KAAMA,EACNe,SAAUxC,KAAKW,KAAK8B,WAAW9B,GAC/BA,KAAMA,Q,6BAvDS+B,EAAA,CAA5BC,K,+BASMD,EAAA,CAFNE,EAAsB,S,gCAOfF,EAAA,CAFPE,EAAsB,oB"}