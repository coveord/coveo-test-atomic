{"version":3,"names":["minimumPage","getCurrentPagesRange","page","desiredNumberOfPages","maxPage","range","buildRange","shiftRightIfNeeded","shiftLeftIfNeeded","buildCurrentPages","isEven","leftCapacity","Math","floor","rightCapacity","start","end","leftExcess","max","rightExcess","currentPages","counter","push","atomicCommercePagerCss","AtomicCommercePagerStyle0","AtomicCommercePager","this","numberOfPages","previousButtonIcon","ArrowLeftIcon","nextButtonIcon","ArrowRightIcon","radioGroupName","randomID","initialize","validateProps","bindings","interfaceElement","type","listingOrSearch","buildProductListing","engine","buildSearch","pager","pagination","Schema","NumberValue","min","validate","render","pagesRange","pagerState","totalPages","h","PagerGuard","key","hasError","hasResults","isAppLoaded","store","PagerNavigation","i18n","PagerPreviousButton","icon","disabled","onClick","previousPage","focusOnFirstResultAndScrollToTop","PagerPageButtons","map","pageNumber","PagerPageButton","isSelected","ariaLabel","t","onChecked","selectPage","groupName","ref","el","focusTarget","setTarget","text","toLocaleString","language","PagerNextButton","nextPage","_a","state","resultList","focusOnFirstResultAfterNextSearch","scrollToTopEvent","emit","activePage","FocusTargetController","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/commerce/atomic-commerce-pager/commerce-pager-utils.ts","src/components/commerce/atomic-commerce-pager/atomic-commerce-pager.pcss?tag=atomic-commerce-pager&encapsulation=shadow","src/components/commerce/atomic-commerce-pager/atomic-commerce-pager.tsx"],"sourcesContent":["const minimumPage = 0;\n\ninterface Range {\n  start: number;\n  end: number;\n}\n\nexport function getCurrentPagesRange(\n  page: number,\n  desiredNumberOfPages: number,\n  maxPage: number\n): number[] {\n  let range = buildRange(page, desiredNumberOfPages);\n  range = shiftRightIfNeeded(range);\n  range = shiftLeftIfNeeded(range, maxPage);\n  return buildCurrentPages(range);\n}\n\nfunction buildRange(page: number, desiredNumberOfPages: number): Range {\n  const isEven = desiredNumberOfPages % 2 === 0;\n  const leftCapacity = Math.floor(desiredNumberOfPages / 2);\n  const rightCapacity = isEven ? leftCapacity - 1 : leftCapacity;\n\n  const start = page - leftCapacity;\n  const end = page + rightCapacity;\n\n  return {start, end};\n}\n\nfunction shiftRightIfNeeded(range: Range) {\n  const leftExcess = Math.max(minimumPage - range.start, 0);\n  const start = range.start + leftExcess;\n  const end = range.end + leftExcess;\n\n  return {start, end};\n}\n\nfunction shiftLeftIfNeeded(range: Range, maxPage: number) {\n  const rightExcess = Math.max(range.end - maxPage, 0);\n  const start = Math.max(range.start - rightExcess, minimumPage);\n  const end = range.end - rightExcess;\n\n  return {start, end};\n}\n\nfunction buildCurrentPages(range: Range) {\n  const currentPages: number[] = [];\n\n  for (let counter = range.start; counter <= range.end; ++counter) {\n    currentPages.push(counter);\n  }\n\n  return currentPages;\n}\n","@import '../../../global/global.pcss';\n","import {NumberValue, Schema} from '@coveo/bueno';\nimport {\n  Pagination,\n  PaginationState,\n  ProductListing,\n  Search,\n  buildProductListing,\n  buildSearch,\n} from '@coveo/headless/commerce';\nimport {Component, Event, EventEmitter, h, Prop, State} from '@stencil/core';\nimport ArrowLeftIcon from '../../../images/arrow-left-rounded.svg';\nimport ArrowRightIcon from '../../../images/arrow-right-rounded.svg';\nimport {FocusTargetController} from '../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {randomID} from '../../../utils/utils';\nimport {\n  PagerNextButton,\n  PagerPageButton,\n  PagerPageButtons,\n  PagerPreviousButton,\n} from '../../common/pager/pager-buttons';\nimport {PagerGuard} from '../../common/pager/pager-guard';\nimport {PagerNavigation} from '../../common/pager/pager-navigation';\nimport {CommerceBindings} from '../atomic-commerce-interface/atomic-commerce-interface';\nimport {getCurrentPagesRange} from './commerce-pager-utils';\n\n/**\n * The `atomic-pager` provides buttons that allow the end user to navigate through the different product pages.\n *\n * @part buttons - The list of the next/previous buttons and page-buttons.\n * @part page-buttons - The list of page buttons.\n * @part page-button - The page button.\n * @part active-page-button - The active page button.\n * @part previous-button - The previous button.\n * @part next-button - The next button.\n * @part previous-button-icon - Icon of the previous button.\n * @part next-button-icon - Icon of the next button.\n *\n * @alpha\n */\n@Component({\n  tag: 'atomic-commerce-pager',\n  styleUrl: 'atomic-commerce-pager.pcss',\n  shadow: true,\n})\nexport class AtomicCommercePager\n  implements InitializableComponent<CommerceBindings>\n{\n  @InitializeBindings() public bindings!: CommerceBindings;\n  public pager!: Pagination;\n  public listingOrSearch!: ProductListing | Search;\n\n  @BindStateToController('pager')\n  @State()\n  public pagerState!: PaginationState;\n\n  @State() error!: Error;\n\n  @Event({\n    eventName: 'atomic/scrollToTop',\n  })\n  private scrollToTopEvent!: EventEmitter;\n\n  /**\n   * Specifies how many page buttons to display in the pager.\n   */\n  @Prop({reflect: true}) numberOfPages = 5;\n\n  /**\n   * The SVG icon to use to display the Previous button.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   */\n  @Prop({reflect: true}) previousButtonIcon: string = ArrowLeftIcon;\n\n  /**\n   * The SVG icon to use to display the Next button.\n   *\n   * - Use a value that starts with `http://`, `https://`, `./`, or `../`, to fetch and display an icon from a given location.\n   * - Use a value that starts with `assets://`, to display an icon from the Atomic package.\n   * - Use a stringified SVG to display it directly.\n   */\n  @Prop({reflect: true}) nextButtonIcon: string = ArrowRightIcon;\n\n  private activePage?: FocusTargetController;\n  private radioGroupName = randomID('atomic-commerce-pager-');\n\n  public initialize() {\n    this.validateProps();\n    if (this.bindings.interfaceElement.type === 'product-listing') {\n      this.listingOrSearch = buildProductListing(this.bindings.engine);\n    } else {\n      this.listingOrSearch = buildSearch(this.bindings.engine);\n    }\n    this.pager = this.listingOrSearch.pagination();\n  }\n\n  private validateProps() {\n    new Schema({\n      numberOfPages: new NumberValue({min: 0}),\n    }).validate({\n      numberOfPages: this.numberOfPages,\n    });\n  }\n\n  public render() {\n    const pagesRange = getCurrentPagesRange(\n      this.pagerState.page,\n      this.numberOfPages,\n      this.pagerState.totalPages - 1\n    );\n\n    return (\n      <PagerGuard\n        hasError={false}\n        hasResults={this.pagerState.totalPages > 1}\n        isAppLoaded={this.bindings.store.isAppLoaded()}\n      >\n        <PagerNavigation i18n={this.bindings.i18n}>\n          <PagerPreviousButton\n            icon={this.previousButtonIcon}\n            disabled={this.pagerState.page === 0}\n            i18n={this.bindings.i18n}\n            onClick={() => {\n              this.pager.previousPage();\n              this.focusOnFirstResultAndScrollToTop();\n            }}\n          />\n          <PagerPageButtons i18n={this.bindings.i18n}>\n            {pagesRange.map((pageNumber) => {\n              return (\n                <PagerPageButton\n                  isSelected={pageNumber === this.pagerState.page}\n                  ariaLabel={this.bindings.i18n.t('page-number', {\n                    pageNumber,\n                  })}\n                  onChecked={() => {\n                    this.pager.selectPage(pageNumber);\n                    this.focusOnFirstResultAndScrollToTop();\n                  }}\n                  page={pageNumber}\n                  groupName={this.radioGroupName}\n                  ref={(el) => {\n                    const isSelected = pageNumber === this.pagerState.page;\n                    if (isSelected && el) {\n                      this.focusTarget.setTarget(el);\n                    }\n                  }}\n                  text={(pageNumber + 1).toLocaleString(\n                    this.bindings.i18n.language\n                  )}\n                />\n              );\n            })}\n          </PagerPageButtons>\n          <PagerNextButton\n            icon={this.nextButtonIcon}\n            disabled={this.pagerState.page >= this.pagerState.totalPages}\n            i18n={this.bindings.i18n}\n            onClick={() => {\n              this.pager.nextPage();\n              this.focusOnFirstResultAndScrollToTop();\n            }}\n          />\n        </PagerNavigation>\n      </PagerGuard>\n    );\n  }\n\n  private async focusOnFirstResultAndScrollToTop() {\n    await this.bindings.store.state.resultList?.focusOnFirstResultAfterNextSearch();\n    this.scrollToTopEvent.emit();\n  }\n\n  private get focusTarget() {\n    if (!this.activePage) {\n      this.activePage = new FocusTargetController(this);\n    }\n    return this.activePage;\n  }\n}\n"],"mappings":"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"}