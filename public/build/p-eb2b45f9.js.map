{"version":3,"names":["RefineModal","props","children","exportparts","flushFacetElements","_a","host","querySelector","remove","renderHeader","h","slot","class","part","title","Button","style","onClick","onClose","ariaLabel","i18n","t","icon","CloseIcon","renderFooter","text","numberOfItems","toLocaleString","language","fullscreen","isOpen","source","openButton","container","close","onAnimationEnded","boundary","scope","getClonedFacetElements","facetElements","collapseFacetsAfter","root","divSlot","document","createElement","setAttribute","display","flexDirection","gap","allFacetTags","Array","from","Set","map","el","tagName","toLowerCase","allFacetsInOrderInDOM","length","querySelectorAll","join","forEach","facetElement","index","clone","cloneNode","isCollapsed","classList","popoverClass","isRefineModalFacet","append"],"sources":["src/components/common/refine-modal/modal.tsx"],"sourcesContent":["import {FunctionalComponent, h} from '@stencil/core';\nimport {i18n} from 'i18next';\nimport CloseIcon from '../../../images/close.svg';\nimport {Button} from '../button';\nimport {BaseFacetElement} from '../facets/facet-common';\nimport {popoverClass} from '../facets/popover/popover-type';\nimport {isRefineModalFacet} from '../interface/store';\n\ninterface RefineModalProps {\n  host: HTMLElement;\n  i18n: i18n;\n  onClose(): void;\n  title: string;\n  numberOfItems: number;\n  isOpen: boolean;\n  openButton?: HTMLElement;\n  boundary?: 'page' | 'element';\n  scope?: HTMLElement;\n}\n\nexport const RefineModal: FunctionalComponent<RefineModalProps> = (\n  props,\n  children\n) => {\n  const exportparts =\n    'container,header,header-wrapper,header-ruler,body,body-wrapper,footer,footer-wrapper,footer-wrapper';\n\n  const flushFacetElements = () => {\n    props.host.querySelector('div[slot=\"facets\"]')?.remove();\n  };\n\n  const renderHeader = () => {\n    return (\n      <div slot=\"header\" class=\"contents\">\n        <h1 part=\"title\" class=\"truncate\">\n          {props.title}\n        </h1>\n        <Button\n          style=\"text-transparent\"\n          class=\"grid place-items-center\"\n          part=\"close-button\"\n          onClick={props.onClose}\n          ariaLabel={props.i18n.t('close')}\n        >\n          <atomic-icon\n            part=\"close-icon\"\n            class=\"w-5 h-5\"\n            icon={CloseIcon}\n          ></atomic-icon>\n        </Button>\n      </div>\n    );\n  };\n\n  const renderFooter = () => {\n    return (\n      <div part=\"footer-content\" slot=\"footer\">\n        <Button\n          style=\"primary\"\n          part=\"footer-button\"\n          class=\"w-full p-3 flex text-lg justify-center\"\n          onClick={props.onClose}\n        >\n          <span part=\"footer-button-text\" class=\"truncate mr-1\">\n            {props.i18n.t('view-results')}\n          </span>\n          <span part=\"footer-button-count\">\n            {props.i18n.t('between-parentheses', {\n              text: props.numberOfItems.toLocaleString(props.i18n.language),\n            })}\n          </span>\n        </Button>\n      </div>\n    );\n  };\n\n  return (\n    <atomic-modal\n      fullscreen\n      isOpen={props.isOpen}\n      source={props.openButton}\n      container={props.host}\n      close={props.onClose}\n      onAnimationEnded={() => {\n        if (!props.isOpen) {\n          flushFacetElements();\n        }\n      }}\n      exportparts={exportparts}\n      boundary={props.boundary}\n      scope={props.scope}\n    >\n      {renderHeader()}\n      {...children}\n      {renderFooter()}\n    </atomic-modal>\n  );\n};\n\nexport function getClonedFacetElements(\n  facetElements: HTMLElement[],\n  collapseFacetsAfter: number,\n  root: HTMLElement\n): HTMLDivElement {\n  const divSlot = document.createElement('div');\n  divSlot.setAttribute('slot', 'facets');\n  divSlot.style.display = 'flex';\n  divSlot.style.flexDirection = 'column';\n  divSlot.style.gap = 'var(--atomic-refine-modal-facet-margin, 20px)';\n\n  const allFacetTags = Array.from(\n    new Set(facetElements.map((el) => el.tagName.toLowerCase()))\n  );\n\n  const allFacetsInOrderInDOM = allFacetTags.length\n    ? root.querySelectorAll(allFacetTags.join(','))\n    : [];\n\n  allFacetsInOrderInDOM.forEach((facetElement, index) => {\n    const clone = facetElement.cloneNode(true) as BaseFacetElement;\n    clone.isCollapsed = index + 1 > collapseFacetsAfter;\n    clone.classList.remove(popoverClass);\n    clone.setAttribute(isRefineModalFacet, '');\n    divSlot.append(clone);\n  });\n\n  return divSlot;\n}\n"],"mappings":"0LAoBaA,EAAqD,CAChEC,EACAC,KAEA,MAAMC,EACJ,sGAEF,MAAMC,EAAqB,K,OACzBC,EAAAJ,EAAMK,KAAKC,cAAc,yBAAqB,MAAAF,SAAA,SAAAA,EAAEG,QAAQ,EAG1D,MAAMC,EAAe,IAEjBC,EAAA,OAAKC,KAAK,SAASC,MAAM,YACvBF,EAAA,MAAIG,KAAK,QAAQD,MAAM,YACpBX,EAAMa,OAETJ,EAACK,EAAM,CACLC,MAAM,mBACNJ,MAAM,0BACNC,KAAK,eACLI,QAAShB,EAAMiB,QACfC,UAAWlB,EAAMmB,KAAKC,EAAE,UAExBX,EAAA,eACEG,KAAK,aACLD,MAAM,UACNU,KAAMC,MAOhB,MAAMC,EAAe,IAEjBd,EAAA,OAAKG,KAAK,iBAAiBF,KAAK,UAC9BD,EAACK,EAAM,CACLC,MAAM,UACNH,KAAK,gBACLD,MAAM,yCACNK,QAAShB,EAAMiB,SAEfR,EAAA,QAAMG,KAAK,qBAAqBD,MAAM,iBACnCX,EAAMmB,KAAKC,EAAE,iBAEhBX,EAAA,QAAMG,KAAK,uBACRZ,EAAMmB,KAAKC,EAAE,sBAAuB,CACnCI,KAAMxB,EAAMyB,cAAcC,eAAe1B,EAAMmB,KAAKQ,eAQhE,OACElB,EAAA,gBACEmB,WAAU,KACVC,OAAQ7B,EAAM6B,OACdC,OAAQ9B,EAAM+B,WACdC,UAAWhC,EAAMK,KACjB4B,MAAOjC,EAAMiB,QACbiB,iBAAkB,KAChB,IAAKlC,EAAM6B,OAAQ,CACjB1B,G,GAGJD,YAAaA,EACbiC,SAAUnC,EAAMmC,SAChBC,MAAOpC,EAAMoC,OAEZ5B,OACGP,EACHsB,IACY,E,SAIHc,EACdC,EACAC,EACAC,GAEA,MAAMC,EAAUC,SAASC,cAAc,OACvCF,EAAQG,aAAa,OAAQ,UAC7BH,EAAQ1B,MAAM8B,QAAU,OACxBJ,EAAQ1B,MAAM+B,cAAgB,SAC9BL,EAAQ1B,MAAMgC,IAAM,gDAEpB,MAAMC,EAAeC,MAAMC,KACzB,IAAIC,IAAIb,EAAcc,KAAKC,GAAOA,EAAGC,QAAQC,kBAG/C,MAAMC,EAAwBR,EAAaS,OACvCjB,EAAKkB,iBAAiBV,EAAaW,KAAK,MACxC,GAEJH,EAAsBI,SAAQ,CAACC,EAAcC,KAC3C,MAAMC,EAAQF,EAAaG,UAAU,MACrCD,EAAME,YAAcH,EAAQ,EAAIvB,EAChCwB,EAAMG,UAAU3D,OAAO4D,GACvBJ,EAAMnB,aAAawB,EAAoB,IACvC3B,EAAQ4B,OAAON,EAAM,IAGvB,OAAOtB,CACT,Q"}