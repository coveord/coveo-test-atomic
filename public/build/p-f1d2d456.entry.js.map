{"version":3,"names":["atomicDidYouMeanCss","AtomicDidYouMeanStyle0","AtomicDidYouMean","this","automaticallyCorrectQuery","queryCorrectionMode","initialize","didYouMean","buildDidYouMean","bindings","engine","options","queryTrigger","buildQueryTrigger","content","queryTriggerState","didYouMeanState","hasQueryCorrection","wasAutomaticallyCorrected","hasTrigger","wasQueryModified","h","AutoCorrection","correctedTo","wasCorrectedTo","originalQuery","i18n","Correction","correctedQuery","queryCorrection","onClick","applyCorrection","TriggerCorrection","newQuery","undo","render","QueryCorrectionGuard","hasCorrection","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/search/atomic-did-you-mean/atomic-did-you-mean.pcss?tag=atomic-did-you-mean&encapsulation=shadow","src/components/search/atomic-did-you-mean/atomic-did-you-mean.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n","import {\n  DidYouMean,\n  DidYouMeanState,\n  buildDidYouMean,\n  QueryTrigger,\n  buildQueryTrigger,\n  QueryTriggerState,\n} from '@coveo/headless';\nimport {Component, h, Prop, State} from '@stencil/core';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {AutoCorrection} from '../../common/query-correction/auto-correction';\nimport {Correction} from '../../common/query-correction/correction';\nimport {QueryCorrectionGuard} from '../../common/query-correction/guard';\nimport {TriggerCorrection} from '../../common/query-correction/trigger-correction';\nimport {Bindings} from '../atomic-search-interface/atomic-search-interface';\n\n/**\n * The `atomic-did-you-mean` component is responsible for handling query corrections. When a query returns no result but finds a possible query correction, the component either suggests the correction or automatically triggers a new query with the suggested term.\n *\n * @part no-results - The text displayed when there are no results.\n * @part auto-corrected - The text displayed for the automatically corrected query.\n * @part showing-results-for - The first paragraph of the text displayed when a query trigger changes a query.\n * @part search-instead-for - The second paragraph of the text displayed when a query trigger changes a query.\n * @part did-you-mean - The text displayed around the button to manually correct a query.\n * @part correction-btn - The button used to manually correct a query.\n * @part undo-btn - The button used to undo a query changed by a query trigger.\n * @part highlight - The query highlights.\n */\n@Component({\n  tag: 'atomic-did-you-mean',\n  styleUrl: 'atomic-did-you-mean.pcss',\n  shadow: true,\n})\nexport class AtomicDidYouMean implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  private didYouMean!: DidYouMean;\n  protected queryTrigger!: QueryTrigger;\n\n  @BindStateToController('didYouMean')\n  @State()\n  private didYouMeanState?: DidYouMeanState;\n  @BindStateToController('queryTrigger')\n  @State()\n  private queryTriggerState?: QueryTriggerState;\n  @State() public error!: Error;\n\n  /**\n   * Whether to automatically apply corrections for queries that would otherwise return no results.\n   * When `automaticallyCorrectQuery` is `true`, the component automatically triggers a new query using the suggested term.\n   * When `automaticallyCorrectQuery` is `false`, the component returns the suggested term without triggering a new query.\n   *\n   * The default value is `true`.\n   */\n  @Prop({reflect: true}) public automaticallyCorrectQuery = true;\n\n  // TODO: V3: Default to `next`\n  /**\n   * Define which query correction system to use\n   *\n   * `legacy`: Query correction is powered by the legacy index system. This system relies on an algorithm using solely the index content to compute the suggested terms.\n   * `next`: Query correction is powered by a machine learning system, requiring a valid query suggestion model configured in your Coveo environment to function properly. This system relies on machine learning algorithms to compute the suggested terms.\n   *\n   * Default value is `legacy`. In the next major version of Atomic, the default value will be `next`.\n   */\n  @Prop({reflect: true})\n  public queryCorrectionMode: 'legacy' | 'next' = 'legacy';\n\n  public initialize() {\n    this.didYouMean = buildDidYouMean(this.bindings.engine, {\n      options: {\n        automaticallyCorrectQuery: this.automaticallyCorrectQuery,\n        queryCorrectionMode: this.queryCorrectionMode,\n      },\n    });\n    this.queryTrigger = buildQueryTrigger(this.bindings.engine);\n  }\n\n  private get content() {\n    if (!this.queryTriggerState || !this.didYouMeanState) {\n      return;\n    }\n\n    const {hasQueryCorrection, wasAutomaticallyCorrected} =\n      this.didYouMeanState;\n    const hasTrigger = this.queryTriggerState.wasQueryModified;\n\n    if (hasQueryCorrection && wasAutomaticallyCorrected) {\n      return (\n        <AutoCorrection\n          correctedTo={this.didYouMeanState.wasCorrectedTo}\n          originalQuery={this.didYouMeanState.originalQuery}\n          i18n={this.bindings.i18n}\n        />\n      );\n    }\n    if (hasQueryCorrection) {\n      return (\n        <Correction\n          correctedQuery={this.didYouMeanState.queryCorrection.correctedQuery}\n          i18n={this.bindings.i18n}\n          onClick={() => this.didYouMean.applyCorrection()}\n        />\n      );\n    }\n    if (hasTrigger) {\n      return (\n        <TriggerCorrection\n          i18n={this.bindings.i18n}\n          correctedQuery={this.queryTriggerState.newQuery}\n          originalQuery={this.queryTriggerState.originalQuery}\n          onClick={() => this.queryTrigger.undo()}\n        />\n      );\n    }\n  }\n\n  public render() {\n    if (!this.didYouMeanState || !this.queryTriggerState) {\n      return;\n    }\n\n    return (\n      <QueryCorrectionGuard\n        hasCorrection={\n          this.didYouMeanState.hasQueryCorrection ||\n          this.queryTriggerState.wasQueryModified\n        }\n      >\n        {this.content}\n      </QueryCorrectionGuard>\n    );\n  }\n}\n"],"mappings":"qRAAA,MAAMA,EAAsB,wguCAC5B,MAAAC,EAAeD,E,iXCoCFE,EAAgB,M,yBAoBGC,KAAAC,0BAA4B,KAYnDD,KAAAE,oBAAyC,S,oHAZU,K,yBAYV,Q,CAEzC,UAAAC,GACLH,KAAKI,WAAaC,EAAgBL,KAAKM,SAASC,OAAQ,CACtDC,QAAS,CACPP,0BAA2BD,KAAKC,0BAChCC,oBAAqBF,KAAKE,uBAG9BF,KAAKS,aAAeC,EAAkBV,KAAKM,SAASC,O,CAGtD,WAAYI,GACV,IAAKX,KAAKY,oBAAsBZ,KAAKa,gBAAiB,CACpD,M,CAGF,MAAMC,mBAACA,EAAkBC,0BAAEA,GACzBf,KAAKa,gBACP,MAAMG,EAAahB,KAAKY,kBAAkBK,iBAE1C,GAAIH,GAAsBC,EAA2B,CACnD,OACEG,EAACC,EAAc,CACbC,YAAapB,KAAKa,gBAAgBQ,eAClCC,cAAetB,KAAKa,gBAAgBS,cACpCC,KAAMvB,KAAKM,SAASiB,M,CAI1B,GAAIT,EAAoB,CACtB,OACEI,EAACM,EAAU,CACTC,eAAgBzB,KAAKa,gBAAgBa,gBAAgBD,eACrDF,KAAMvB,KAAKM,SAASiB,KACpBI,QAAS,IAAM3B,KAAKI,WAAWwB,mB,CAIrC,GAAIZ,EAAY,CACd,OACEE,EAACW,EAAiB,CAChBN,KAAMvB,KAAKM,SAASiB,KACpBE,eAAgBzB,KAAKY,kBAAkBkB,SACvCR,cAAetB,KAAKY,kBAAkBU,cACtCK,QAAS,IAAM3B,KAAKS,aAAasB,Q,EAMlC,MAAAC,GACL,IAAKhC,KAAKa,kBAAoBb,KAAKY,kBAAmB,CACpD,M,CAGF,OACEM,EAACe,EAAoB,CACnBC,cACElC,KAAKa,gBAAgBC,oBACrBd,KAAKY,kBAAkBK,kBAGxBjB,KAAKW,Q,GA9FiBwB,EAAA,CAA5BC,K,+BAMOD,EAAA,CAFPE,EAAsB,e,sCAKfF,EAAA,CAFPE,EAAsB,iB"}