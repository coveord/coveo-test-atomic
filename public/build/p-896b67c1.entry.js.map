{"version":3,"names":["atomicCommerceBreadboxCss","AtomicCommerceBreadboxStyle0","AtomicCommerceBreadbox","this","lastRemovedBreadcrumbIndex","numberOfBreadcrumbs","numberOfCollapsedBreadcrumbs","isCollapsed","pathLimit","valueForFacetType","type","field","value","bindings","store","state","numericFacets","format","dateFacets","path","map","pathValue","getFieldValueCaption","i18n","initialize","validateProps","interfaceElement","searchOrListing","buildProductListing","engine","buildSearch","breadcrumbManager","facetGenerator","window","ResizeObserver","resizeObserver","adaptBreadcrumbs","observe","host","parentElement","Schema","NumberValue","default","min","required","validate","disconnectedCallback","_a","disconnect","focusTargets","breadcrumbRemovedFocus","FocusTargetController","breadcrumbShowLessFocus","breadcrumbShowMoreFocus","breadcrumbs","Array","from","shadowRoot","querySelectorAll","hide","element","style","display","show","showAllBreadcrumbs","forEach","breadcrumb","hideOverflowingBreadcrumbs","hiddenBreadcrumbs","i","length","isOverflowing","updateShowMoreValue","updateShowLessDisplay","showLess","offsetTop","listElement","querySelector","scrollWidth","clientWidth","showMore","textContent","toLocaleString","language","setAttribute","t","buildBreadcrumb","facetStateName","values","facetId","label","deselect","formattedValue","renderBreadcrumbs","index","isLastBreadcrumb","h","BreadcrumbButton","setRef","ref","setTarget","firstExpandedBreadcrumbIndex","onSelectBreadcrumb","resultList","focusOnFirstResultAfterNextSearch","focusAfterSearch","BreadcrumbContent","render","breadcrumbManagerState","facetBreadcrumbs","flat","Hidden","BreadcrumbContainer","BreadcrumbShowMore","el","onShowMore","focusOnNextTarget","BreadcrumbShowLess","onShowLess","BreadcrumbClearAll","onClick","async","deselectAll","componentDidRender","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/commerce/atomic-commerce-breadbox/atomic-commerce-breadbox.pcss?tag=atomic-commerce-breadbox&encapsulation=shadow","src/components/commerce/atomic-commerce-breadbox/atomic-commerce-breadbox.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n@import '../../common/atomic-rating/atomic-rating.pcss';\n\n.max-w-snippet {\n  max-width: 30ch;\n}\n\n[part='breadcrumb-label'].excluded,\n[part='breadcrumb-value'].excluded {\n  text-decoration: line-through;\n  color: var(--atomic-error);\n}\n\n/* When excluded, strikethrough line must be continuous, so we must prepend empty character instead of margin */\n[part='breadcrumb-value']::before {\n  content: '\\00a0';\n}\n","import {NumberValue, Schema} from '@coveo/bueno';\nimport {\n  BreadcrumbManagerState,\n  BreadcrumbManager,\n  FacetGenerator,\n  FacetGeneratorState,\n  ProductListing,\n  Search,\n  buildProductListing,\n  buildSearch,\n  NumericFacetValue,\n  RegularFacetValue,\n  DateFacetValue,\n  Breadcrumb,\n  CategoryFacetValue,\n  BreadcrumbValue,\n} from '@coveo/headless/commerce';\nimport {Component, h, State, Element, Prop} from '@stencil/core';\nimport {FocusTargetController} from '../../../utils/accessibility-utils';\nimport {getFieldValueCaption} from '../../../utils/field-utils';\nimport {\n  InitializableComponent,\n  BindStateToController,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {BreadcrumbButton} from '../../common/breadbox/breadcrumb-button';\nimport {BreadcrumbClearAll} from '../../common/breadbox/breadcrumb-clear-all';\nimport {BreadcrumbContainer} from '../../common/breadbox/breadcrumb-container';\nimport {BreadcrumbContent} from '../../common/breadbox/breadcrumb-content';\nimport {BreadcrumbShowLess} from '../../common/breadbox/breadcrumb-show-less';\nimport {BreadcrumbShowMore} from '../../common/breadbox/breadcrumb-show-more';\nimport {Breadcrumb as BreadboxBreadcrumb} from '../../common/breadbox/breadcrumb-types';\nimport {Hidden} from '../../common/hidden';\nimport {CommerceBindings} from '../atomic-commerce-interface/atomic-commerce-interface';\n\ntype AnyFacetValue =\n  | RegularFacetValue\n  | NumericFacetValue\n  | DateFacetValue\n  | CategoryFacetValue;\n\n/**\n * The `atomic-commerce-breadbox` component creates breadcrumbs that display a summary of the currently active facet values.\n *\n * @part container - The container of the whole component, list & label.\n * @part breadcrumb-list-container - The container of the list of breadcrumb buttons.\n * @part breadcrumb-list - The list of breadcrumb buttons.\n * @part breadcrumb-button - A single breadcrumb button.\n * @part breadcrumb-label - The breadcrumb label, associated with the facet.\n * @part breadcrumb-value - The breadcrumb formatted value.\n * @part breadcrumb-clear - The button to clear individual filters.\n * @part show-more - The button to display all breadcrumbs.\n * @part show-less - The button to display less breadcrumbs.\n * @part label - The \"Filters\" label.\n * @part clear - The button to clear all filters.\n *\n * @internal\n */\n@Component({\n  tag: 'atomic-commerce-breadbox',\n  styleUrl: 'atomic-commerce-breadbox.pcss',\n  shadow: true,\n})\nexport class AtomicCommerceBreadbox\n  implements InitializableComponent<CommerceBindings>\n{\n  @InitializeBindings() public bindings!: CommerceBindings;\n\n  private resizeObserver?: ResizeObserver;\n  private showMore!: HTMLButtonElement;\n  private showLess!: HTMLButtonElement;\n  private lastRemovedBreadcrumbIndex = 0;\n  private numberOfBreadcrumbs = 0;\n  private numberOfCollapsedBreadcrumbs = 0;\n  private firstExpandedBreadcrumbIndex?: number;\n  facetGenerator!: FacetGenerator;\n  breadcrumbManager!: BreadcrumbManager;\n\n  @Element() private host!: HTMLElement;\n\n  public searchOrListing!: Search | ProductListing;\n\n  @BindStateToController('breadcrumbManager')\n  @State()\n  private breadcrumbManagerState!: BreadcrumbManagerState;\n  @BindStateToController('facetGenerator')\n  @State()\n  public facetGeneratorState!: FacetGeneratorState[];\n  @State() public error!: Error;\n  @State() private isCollapsed = true;\n\n  private breadcrumbRemovedFocus?: FocusTargetController;\n\n  private breadcrumbShowMoreFocus?: FocusTargetController;\n\n  private breadcrumbShowLessFocus?: FocusTargetController;\n\n  /**\n   * This prop allows you to control the display depth\n   * of the path by specifying the number of parent or ancestor\n   * breadcrumbs links relative to the currently selected value.\n   *\n   * If the path size is equal to or less than the pathLimit, all values in\n   * the path will be displayed without truncation.\n   *\n   * If the path size exceeds the pathLimit, it will truncate the path by\n   * replacing the middle values with ellipses ('...').\n   *\n   * Minimum: `1`\n   * @defaultValue `3`\n   */\n  @Prop() public pathLimit = 3;\n\n  public initialize() {\n    this.validateProps();\n\n    if (this.bindings.interfaceElement.type === 'product-listing') {\n      this.searchOrListing = buildProductListing(this.bindings.engine);\n    } else {\n      this.searchOrListing = buildSearch(this.bindings.engine);\n    }\n\n    this.breadcrumbManager = this.searchOrListing.breadcrumbManager();\n    this.facetGenerator = this.searchOrListing.facetGenerator();\n\n    if (window.ResizeObserver) {\n      this.resizeObserver = new ResizeObserver(() => this.adaptBreadcrumbs());\n      this.resizeObserver.observe(this.host.parentElement!);\n    }\n  }\n\n  private validateProps() {\n    new Schema({\n      pathLimit: new NumberValue({\n        default: 3,\n        min: 1,\n        required: false,\n      }),\n    }).validate({\n      pathLimit: this.pathLimit,\n    });\n  }\n\n  public disconnectedCallback() {\n    this.resizeObserver?.disconnect();\n  }\n\n  private get focusTargets() {\n    if (!this.breadcrumbRemovedFocus) {\n      this.breadcrumbRemovedFocus = new FocusTargetController(this);\n    }\n    if (!this.breadcrumbShowLessFocus) {\n      this.breadcrumbShowLessFocus = new FocusTargetController(this);\n    }\n    if (!this.breadcrumbShowMoreFocus) {\n      this.breadcrumbShowMoreFocus = new FocusTargetController(this);\n    }\n    return {\n      breadcrumbRemovedFocus: this.breadcrumbRemovedFocus,\n      breadcrumbShowLessFocus: this.breadcrumbShowLessFocus,\n      breadcrumbShowMoreFocus: this.breadcrumbShowMoreFocus,\n    };\n  }\n\n  private get breadcrumbs() {\n    return Array.from(\n      this.host.shadowRoot!.querySelectorAll('li.breadcrumb')\n    ) as HTMLElement[];\n  }\n\n  private hide(element: HTMLElement) {\n    element.style.display = 'none';\n  }\n\n  private show(element: HTMLElement) {\n    element.style.display = '';\n  }\n\n  private showAllBreadcrumbs() {\n    this.breadcrumbs.forEach((breadcrumb) => this.show(breadcrumb));\n  }\n\n  private hideOverflowingBreadcrumbs() {\n    let hiddenBreadcrumbs = 0;\n    for (\n      let i = this.breadcrumbs.length - 1;\n      this.isOverflowing && i >= 0;\n      i--\n    ) {\n      this.hide(this.breadcrumbs[i]);\n      hiddenBreadcrumbs++;\n    }\n    this.updateShowMoreValue(hiddenBreadcrumbs);\n  }\n\n  private updateShowLessDisplay() {\n    this.show(this.showLess);\n    if (this.showLess.offsetTop === 0) {\n      this.hide(this.showLess);\n    }\n  }\n\n  private adaptBreadcrumbs() {\n    if (!this.breadcrumbs.length) {\n      return;\n    }\n    this.showAllBreadcrumbs();\n\n    if (!this.isCollapsed) {\n      this.updateShowLessDisplay();\n      return;\n    }\n\n    this.updateShowMoreValue(this.breadcrumbs.length);\n    this.hideOverflowingBreadcrumbs();\n  }\n\n  private get isOverflowing() {\n    const listElement = this.host.shadowRoot!.querySelector('ul');\n    if (!listElement) {\n      return false;\n    }\n    return listElement.scrollWidth > listElement.clientWidth;\n  }\n\n  private updateShowMoreValue(value: number) {\n    this.numberOfCollapsedBreadcrumbs = value;\n    if (value === 0) {\n      this.hide(this.showMore);\n      return;\n    }\n    this.show(this.showMore);\n    this.showMore.textContent = `+ ${value.toLocaleString(\n      this.bindings.i18n.language\n    )}`;\n    this.showMore.setAttribute(\n      'aria-label',\n      this.bindings.i18n.t('show-n-more-filters', {\n        value,\n      })\n    );\n  }\n\n  private valueForFacetType = (\n    type: string,\n    field: string,\n    value: BreadcrumbValue<AnyFacetValue>\n  ): string[] => {\n    switch (type) {\n      case 'numericalRange':\n        return [\n          this.bindings.store.state.numericFacets[field].format(\n            value.value as NumericFacetValue\n          ),\n        ];\n      case 'dateRange':\n        return [\n          this.bindings.store.state.dateFacets[field].format(\n            value.value as DateFacetValue\n          ),\n        ];\n      case 'hierarchical':\n        return (value.value as CategoryFacetValue).path.map(\n          (pathValue: string) =>\n            getFieldValueCaption(field, pathValue, this.bindings.i18n)\n        );\n      default:\n        return [\n          getFieldValueCaption(\n            field,\n            (value.value as RegularFacetValue).value,\n            this.bindings.i18n\n          ),\n        ];\n    }\n  };\n\n  private buildBreadcrumb(breadcrumb: Breadcrumb<AnyFacetValue>) {\n    let facetStateName:\n      | 'facets'\n      | 'categoryFacets'\n      | 'numericFacets'\n      | 'dateFacets';\n\n    switch (breadcrumb.type) {\n      case 'hierarchical':\n        facetStateName = 'categoryFacets';\n        break;\n      case 'numericalRange':\n        facetStateName = 'numericFacets';\n        break;\n      case 'dateRange':\n        facetStateName = 'dateFacets';\n        break;\n      default:\n        facetStateName = 'facets';\n    }\n\n    return breadcrumb.values.map((value: BreadcrumbValue<AnyFacetValue>) => {\n      return {\n        facetId: breadcrumb.facetId,\n        label:\n          this.bindings.store.state[facetStateName][\n            breadcrumb.facetId\n          ]?.label(),\n        deselect: value.deselect,\n        formattedValue: this.valueForFacetType(\n          breadcrumb.type,\n          breadcrumb.facetId,\n          value\n        ),\n      };\n    });\n  }\n\n  private renderBreadcrumbs(breadcrumbs: BreadboxBreadcrumb[]) {\n    this.numberOfBreadcrumbs = breadcrumbs.length;\n\n    return breadcrumbs.map((breadcrumb, index) => {\n      const isLastBreadcrumb = breadcrumbs.length === 1;\n      return (\n        <BreadcrumbButton\n          setRef={(ref) => {\n            if (this.lastRemovedBreadcrumbIndex === index) {\n              this.focusTargets.breadcrumbRemovedFocus.setTarget(ref);\n            }\n            if (this.firstExpandedBreadcrumbIndex === index) {\n              this.focusTargets.breadcrumbShowMoreFocus.setTarget(ref);\n            }\n          }}\n          pathLimit={this.pathLimit}\n          breadcrumb={breadcrumb}\n          onSelectBreadcrumb={() => {\n            if (isLastBreadcrumb) {\n              this.bindings.store.state.resultList?.focusOnFirstResultAfterNextSearch();\n            } else if (this.numberOfBreadcrumbs > 1) {\n              this.focusTargets.breadcrumbRemovedFocus.focusAfterSearch();\n            }\n\n            this.lastRemovedBreadcrumbIndex = index;\n            breadcrumb.deselect();\n          }}\n          i18n={this.bindings.i18n}\n        >\n          <BreadcrumbContent\n            pathLimit={this.pathLimit}\n            isCollapsed={this.isCollapsed}\n            i18n={this.bindings.i18n}\n            breadcrumb={breadcrumb}\n          ></BreadcrumbContent>\n        </BreadcrumbButton>\n      );\n    });\n  }\n\n  public render() {\n    const breadcrumbs = this.breadcrumbManagerState.facetBreadcrumbs\n      .map((breadcrumb) => {\n        return this.buildBreadcrumb(breadcrumb);\n      })\n      .flat();\n\n    if (!breadcrumbs.length) {\n      return <Hidden></Hidden>;\n    }\n    return (\n      <BreadcrumbContainer\n        isCollapsed={this.isCollapsed}\n        i18n={this.bindings.i18n}\n      >\n        {this.renderBreadcrumbs(breadcrumbs)}\n        <BreadcrumbShowMore\n          setRef={(el: HTMLButtonElement) => {\n            this.focusTargets.breadcrumbShowLessFocus.setTarget(el!);\n            this.showMore = el;\n          }}\n          onShowMore={() => {\n            this.firstExpandedBreadcrumbIndex =\n              this.numberOfBreadcrumbs - this.numberOfCollapsedBreadcrumbs;\n            this.focusTargets.breadcrumbShowMoreFocus.focusOnNextTarget();\n            this.isCollapsed = false;\n          }}\n          isCollapsed={this.isCollapsed}\n          i18n={this.bindings.i18n}\n          numberOfCollapsedBreadcrumbs={this.numberOfCollapsedBreadcrumbs}\n        ></BreadcrumbShowMore>\n\n        <BreadcrumbShowLess\n          setRef={(el: HTMLButtonElement) => {\n            this.showLess = el;\n          }}\n          onShowLess={() => {\n            this.focusTargets.breadcrumbShowLessFocus.focusOnNextTarget();\n            this.isCollapsed = true;\n          }}\n          isCollapsed={this.isCollapsed}\n          i18n={this.bindings.i18n}\n        ></BreadcrumbShowLess>\n\n        <BreadcrumbClearAll\n          setRef={() => {\n            const isFocusTarget =\n              this.lastRemovedBreadcrumbIndex === this.numberOfBreadcrumbs;\n\n            isFocusTarget\n              ? this.focusTargets.breadcrumbRemovedFocus.setTarget\n              : undefined;\n          }}\n          onClick={async () => {\n            this.breadcrumbManager.deselectAll();\n            this.bindings.store.state.resultList?.focusOnFirstResultAfterNextSearch();\n          }}\n          isCollapsed={this.isCollapsed}\n          i18n={this.bindings.i18n}\n        ></BreadcrumbClearAll>\n      </BreadcrumbContainer>\n    );\n  }\n\n  public componentDidRender() {\n    this.adaptBreadcrumbs();\n  }\n}\n"],"mappings":"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"}