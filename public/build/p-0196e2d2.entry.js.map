{"version":3,"names":["atomicInsightFacetCss","AtomicInsightFacetStyle0","AtomicInsightFacet","this","dependsOn","label","numberOfValues","sortCriteria","resultsMustMatch","displayValuesAs","isCollapsed","headingLevel","filterFacetCount","injectionDepth","enableExclusion","initialize","options","facetId","field","facetSearch","facet","buildInsightFacet","bindings","engine","state","searchStatus","buildInsightSearchStatus","initAriaLive","initConditionManager","initPopover","registerFacet","focusTargets","showLessFocus","FocusTargetController","showMoreFocus","headerFocus","showLess","showMore","header","disconnectedCallback","host","isConnected","_a","facetConditionsManager","stopWatching","render","h","FacetGuard","key","enabled","facetState","hasError","searchStatusState","firstSearchExecuted","hasResults","values","length","FacetContainer","FacetHeader","i18n","onClearFilters","focusAfterSearch","deselectAll","numberOfActiveValues","activeValues","onToggleCollapse","headerRef","el","setTarget","renderValues","renderShowMoreLess","FacetPlaceholder","renderValuesContainer","children","query","classes","FacetValuesGroup","class","part","map","value","i","shouldFocusOnShowLessAfterInteraction","shouldFocusOnShowMoreAfterInteraction","FacetValue","facetValueProps","facetCount","numberOfResults","onExclude","toggleExclude","onSelect","toggleSelect","facetValue","setRef","btn","_b","FacetShowMoreLess","onShowMore","showMoreValues","onShowLess","showLessValues","canShowMoreValues","canShowLessValues","filter","facetSearchQuery","announceFacetSearchResultsWithAriaLive","msg","facetSearchAriaMessage","buildInsightFacetConditionsManager","conditions","parseDependsOn","initializePopover","facetInfo","hasValues","isHidden","t","element","store","__decorate","InitializeBindings","BindStateToController","AriaLiveRegion"],"sources":["src/components/insight/atomic-insight-facet/atomic-insight-facet.pcss?tag=atomic-insight-facet&encapsulation=shadow","src/components/insight/atomic-insight-facet/atomic-insight-facet.tsx"],"sourcesContent":["@import '../../common/facets/facet-common.pcss';\n@import '../../common/facets/facet-search/facet-search.pcss';\n@import '../../common/facets/facet-value-checkbox/facet-value-checkbox.pcss';\n@import '../../common/facets/facet-value-exclude/facet-value-exclude.pcss';\n@import '../../common/facets/facet-value-box/facet-value-box.pcss';\n","import {FacetResultsMustMatch} from '@coveo/headless';\nimport {Component, h, State, Prop, Element, VNode} from '@stencil/core';\nimport {\n  buildInsightFacet,\n  buildInsightFacetConditionsManager,\n  buildInsightSearchStatus,\n  InsightCategoryFacetValueRequest,\n  InsightFacet,\n  InsightFacetConditionsManager,\n  InsightFacetOptions,\n  InsightFacetSortCriterion,\n  InsightFacetState,\n  InsightFacetValueRequest,\n  InsightSearchStatus,\n  InsightSearchStatusState,\n} from '..';\nimport {\n  AriaLiveRegion,\n  FocusTargetController,\n} from '../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {parseDependsOn} from '../../common/facets/depends-on';\nimport {FacetInfo} from '../../common/facets/facet-common-store';\nimport {FacetContainer} from '../../common/facets/facet-container/facet-container';\nimport {FacetGuard} from '../../common/facets/facet-guard';\nimport {FacetHeader} from '../../common/facets/facet-header/facet-header';\nimport {FacetPlaceholder} from '../../common/facets/facet-placeholder/facet-placeholder';\nimport {announceFacetSearchResultsWithAriaLive} from '../../common/facets/facet-search/facet-search-aria-live';\nimport {FacetShowMoreLess} from '../../common/facets/facet-show-more-less/facet-show-more-less';\nimport {\n  FacetValueProps,\n  FacetValue,\n} from '../../common/facets/facet-value/facet-value';\nimport {FacetValuesGroup} from '../../common/facets/facet-values-group/facet-values-group';\nimport {initializePopover} from '../../common/facets/popover/popover-type';\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-facet',\n  styleUrl: 'atomic-insight-facet.pcss',\n  shadow: true,\n})\nexport class AtomicInsightFacet\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  public facet!: InsightFacet;\n  public searchStatus!: InsightSearchStatus;\n  public dependsOn = {};\n  @Element() private host!: HTMLElement;\n\n  @BindStateToController('facet')\n  @State()\n  public facetState!: InsightFacetState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: InsightSearchStatusState;\n  @State() public error!: Error;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The non-localized label for the facet.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * The number of values to request for this facet.\n   * Also determines the number of additional values to request each time more values are shown.\n   */\n  @Prop({reflect: true}) public numberOfValues = 8;\n  /**\n   * The sort criterion to apply to the returned facet values.\n   * Possible values are 'score', 'alphanumeric', 'occurrences', and 'automatic'.\n   */\n  @Prop({reflect: true}) public sortCriteria: InsightFacetSortCriterion =\n    'automatic';\n  /**\n   * Specifies how a result must match the selected facet values.\n   * Allowed values:\n   * - `atLeastOneValue`: A result will match if at least one of the corresponding facet values is selected.\n   * - `allValues`: A result will match if all corresponding facet values are selected.\n   */\n  @Prop({reflect: true}) public resultsMustMatch: FacetResultsMustMatch =\n    'atLeastOneValue';\n  /**\n   * Whether to display the facet values as checkboxes (multiple selection), links (single selection) or boxes (multiple selection).\n   * Possible values are 'checkbox', 'link', and 'box'.\n   */\n  @Prop({reflect: true}) public displayValuesAs: 'checkbox' | 'link' | 'box' =\n    'checkbox';\n  /**\n   * Specifies if the facet is collapsed.\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   * Default: `1000`\n   */\n  @Prop() public injectionDepth = 1000;\n  /**\n   * Whether to allow excluding values from the facet.\n   */\n  @Prop({reflect: true}) public enableExclusion = false;\n\n  private showLessFocus?: FocusTargetController;\n  private showMoreFocus?: FocusTargetController;\n  private headerFocus?: FocusTargetController;\n  private facetConditionsManager?: InsightFacetConditionsManager;\n\n  @AriaLiveRegion('facet-search')\n  protected facetSearchAriaMessage!: string;\n\n  public initialize() {\n    const options: InsightFacetOptions = {\n      facetId: this.facetId,\n      field: this.field,\n      numberOfValues: this.numberOfValues,\n      sortCriteria: this.sortCriteria,\n      facetSearch: {numberOfValues: this.numberOfValues},\n      filterFacetCount: this.filterFacetCount,\n      injectionDepth: this.injectionDepth,\n    };\n\n    this.facet = buildInsightFacet(this.bindings.engine, {options});\n    this.facetId = this.facet.state.facetId;\n    this.searchStatus = buildInsightSearchStatus(this.bindings.engine);\n    this.initAriaLive();\n    this.initConditionManager();\n    this.initPopover();\n    this.registerFacet();\n  }\n\n  private get focusTargets(): {\n    showLess: FocusTargetController;\n    showMore: FocusTargetController;\n    header: FocusTargetController;\n  } {\n    if (!this.showLessFocus) {\n      this.showLessFocus = new FocusTargetController(this);\n    }\n    if (!this.showMoreFocus) {\n      this.showMoreFocus = new FocusTargetController(this);\n    }\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n    return {\n      showLess: this.showLessFocus,\n      showMore: this.showMoreFocus,\n      header: this.headerFocus,\n    };\n  }\n\n  public disconnectedCallback() {\n    if (this.host.isConnected) {\n      return;\n    }\n    this.facetConditionsManager?.stopWatching();\n  }\n\n  public render() {\n    return (\n      <FacetGuard\n        enabled={this.facetState.enabled}\n        hasError={this.searchStatusState.hasError}\n        firstSearchExecuted={this.searchStatusState.firstSearchExecuted}\n        hasResults={this.facetState.values.length > 0}\n      >\n        {this.searchStatusState.firstSearchExecuted ? (\n          <FacetContainer>\n            <FacetHeader\n              i18n={this.bindings.i18n}\n              label={this.label}\n              onClearFilters={() => {\n                this.focusTargets.header.focusAfterSearch();\n                this.facet.deselectAll();\n              }}\n              numberOfActiveValues={this.activeValues.length}\n              isCollapsed={this.isCollapsed}\n              headingLevel={this.headingLevel}\n              onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\n              headerRef={(el) => this.focusTargets.header.setTarget(el)}\n            ></FacetHeader>\n\n            {[this.renderValues(), this.renderShowMoreLess()]}\n          </FacetContainer>\n        ) : (\n          <FacetPlaceholder\n            numberOfValues={this.numberOfValues}\n            isCollapsed={this.isCollapsed}\n          />\n        )}\n      </FacetGuard>\n    );\n  }\n\n  private renderValuesContainer(children: VNode[], query?: string) {\n    const classes = `mt-3 ${\n      this.displayValuesAs === 'box' ? 'box-container' : ''\n    }`;\n    return (\n      <FacetValuesGroup\n        i18n={this.bindings.i18n}\n        label={this.label}\n        query={query}\n      >\n        <ul class={classes} part=\"values\">\n          {children}\n        </ul>\n      </FacetValuesGroup>\n    );\n  }\n\n  private renderValues() {\n    return this.renderValuesContainer(\n      this.facet.state.values.map((value, i) => {\n        const shouldFocusOnShowLessAfterInteraction = i === 0;\n        const shouldFocusOnShowMoreAfterInteraction =\n          i ===\n          (this.sortCriteria === 'automatic'\n            ? 0\n            : this.facetState.values.length - 1);\n\n        return (\n          <FacetValue\n            {...this.facetValueProps}\n            facetCount={value.numberOfResults}\n            onExclude={() => this.facet.toggleExclude(value)}\n            onSelect={() => this.facet.toggleSelect(value)}\n            facetValue={value.value}\n            facetState={value.state}\n            setRef={(btn) => {\n              if (shouldFocusOnShowLessAfterInteraction) {\n                this.showLessFocus?.setTarget(btn);\n              }\n              if (shouldFocusOnShowMoreAfterInteraction) {\n                this.showMoreFocus?.setTarget(btn);\n              }\n            }}\n          />\n        );\n      })\n    );\n  }\n\n  private renderShowMoreLess() {\n    return (\n      <FacetShowMoreLess\n        label={this.label}\n        i18n={this.bindings.i18n}\n        onShowMore={() => {\n          this.focusTargets.showMore.focusAfterSearch();\n          this.facet.showMoreValues();\n        }}\n        onShowLess={() => {\n          this.focusTargets.showLess.focusAfterSearch();\n          this.facet.showLessValues();\n        }}\n        canShowMoreValues={this.facet.state.canShowMoreValues}\n        canShowLessValues={this.facet.state.canShowLessValues}\n      ></FacetShowMoreLess>\n    );\n  }\n\n  private get activeValues() {\n    return this.facet.state.values.filter(({state}) => state !== 'idle');\n  }\n\n  private get facetValueProps(): Pick<\n    FacetValueProps,\n    | 'displayValuesAs'\n    | 'facetSearchQuery'\n    | 'enableExclusion'\n    | 'field'\n    | 'i18n'\n  > {\n    return {\n      facetSearchQuery: this.facetState.facetSearch.query,\n      displayValuesAs: this.displayValuesAs,\n      enableExclusion: this.enableExclusion,\n      field: this.field,\n      i18n: this.bindings.i18n,\n    };\n  }\n\n  private initAriaLive() {\n    announceFacetSearchResultsWithAriaLive(\n      this.facet,\n      this.label,\n      (msg) => (this.facetSearchAriaMessage = msg),\n      this.bindings.i18n\n    );\n  }\n\n  private initConditionManager() {\n    this.facetConditionsManager = buildInsightFacetConditionsManager(\n      this.bindings.engine,\n      {\n        facetId: this.facetId!,\n        conditions: parseDependsOn<\n          InsightFacetValueRequest | InsightCategoryFacetValueRequest\n        >(this.dependsOn),\n      }\n    );\n  }\n\n  private initPopover() {\n    initializePopover(this.host, {\n      ...this.facetInfo,\n      hasValues: () => !!this.facet.state.values.length,\n      numberOfActiveValues: () => this.activeValues.length,\n    });\n  }\n\n  private get isHidden() {\n    return !this.facet.state.enabled || !this.facet.state.values.length;\n  }\n\n  private get facetInfo(): FacetInfo {\n    return {\n      label: () => this.bindings.i18n.t(this.label),\n      facetId: this.facetId!,\n      element: this.host,\n      isHidden: () => this.isHidden,\n    };\n  }\n\n  private registerFacet() {\n    this.bindings.store.registerFacet('facets', this.facetInfo);\n  }\n}\n"],"mappings":"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"}