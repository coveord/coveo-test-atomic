{"version":3,"names":["atomicNumericFacetCss","AtomicNumericFacetStyle0","AtomicNumericFacet","this","manualRanges","formatter","defaultNumberFormatter","label","numberOfValues","sortCriteria","rangeAlgorithm","displayValuesAs","isCollapsed","headingLevel","filterFacetCount","injectionDepth","dependsOn","focusTarget","headerFocus","FocusTargetController","initialize","validateProps","computeFacetId","initializeFacetForInput","initializeFacetForRange","initializeFilter","initializeDependenciesManager","initializeSearchStatus","registerFacetToStore","disconnectedCallback","host","isConnected","_a","dependenciesManager","stopWatching","searchStatus","buildSearchStatus","bindings","engine","withInput","facetForInput","buildNumericFacet","options","generateAutomaticRanges","facetId","field","Array","from","querySelectorAll","map","start","end","endInclusive","buildNumericRange","facetForRange","currentValues","length","filter","buildNumericFilter","buildFacetConditionsManager","_b","state","conditions","parseDependsOn","facetInfo","i18n","t","element","isHidden","store","registerFacet","format","value","formatHumanReadable","facetValue","logger","initializePopover","hasValues","numberOfActiveValues","numberOfSelectedValues","numericFacets","setFormat","event","preventDefault","stopPropagation","detail","applyNumberInput","dispatch","loadNumericFacetSetActions","deselectAllNumericFacetValues","render","searchStatusState","firstSearchExecuted","hasError","h","FacetGuard","key","enabled","hasResults","shouldRenderFacet","FacetContainer","FacetHeader","onClearFilters","focusAfterSearch","filterState","range","clear","_c","deselectAll","onToggleCollapse","headerRef","el","setTarget","shouldRenderValues","renderValues","shouldRenderInput","type","FacetPlaceholder","NumericFacetValuesContainer","valuesToRender","NumericFacetValueLink","onClick","toggleSingleSelect","toggleSelect","values","hasInputRange","numberOfResults","shouldDisplayInputForFacetRange","facetValues","hasInput","get","randomID","_d","facetState","Schema","StringValue","constrainTo","validate","__decorate","InitializeBindings","BindStateToController","MapProp"],"sources":["src/components/search/facets/atomic-numeric-facet/atomic-numeric-facet.pcss?tag=atomic-numeric-facet&encapsulation=shadow","src/components/search/facets/atomic-numeric-facet/atomic-numeric-facet.tsx"],"sourcesContent":["@import '../../../common/facets/numeric-facet-common.pcss';\n","import {Schema, StringValue} from '@coveo/bueno';\nimport {\n  buildFacetConditionsManager,\n  FacetConditionsManager,\n  buildNumericFacet,\n  buildNumericFilter,\n  buildNumericRange,\n  buildSearchStatus,\n  CategoryFacetValueRequest,\n  FacetValueRequest,\n  loadNumericFacetSetActions,\n  NumericFacet,\n  NumericFacetState,\n  NumericFilter,\n  NumericFilterState,\n  RangeFacetRangeAlgorithm,\n  RangeFacetSortCriterion,\n  SearchStatus,\n  SearchStatusState,\n  NumericRangeRequest,\n} from '@coveo/headless';\nimport {Component, Element, h, Listen, Prop, State} from '@stencil/core';\nimport {FocusTargetController} from '../../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../../utils/initialization-utils';\nimport {MapProp} from '../../../../utils/props-utils';\nimport {randomID} from '../../../../utils/utils';\nimport {parseDependsOn} from '../../../common/facets/depends-on';\nimport {shouldDisplayInputForFacetRange} from '../../../common/facets/facet-common';\nimport {FacetInfo} from '../../../common/facets/facet-common-store';\nimport {FacetContainer} from '../../../common/facets/facet-container/facet-container';\nimport {FacetGuard} from '../../../common/facets/facet-guard';\nimport {FacetHeader} from '../../../common/facets/facet-header/facet-header';\nimport {NumberInputType} from '../../../common/facets/facet-number-input/number-input-type';\nimport {FacetPlaceholder} from '../../../common/facets/facet-placeholder/facet-placeholder';\nimport {formatHumanReadable} from '../../../common/facets/numeric-facet/formatter';\nimport {NumericFacetValueLink} from '../../../common/facets/numeric-facet/value-link';\nimport {NumericFacetValuesContainer} from '../../../common/facets/numeric-facet/values-container';\nimport {initializePopover} from '../../../common/facets/popover/popover-type';\nimport {\n  defaultNumberFormatter,\n  NumberFormatter,\n} from '../../../common/formats/format-common';\nimport {Bindings} from '../../atomic-search-interface/atomic-search-interface';\n\n/**\n * A facet is a list of values for a certain field occurring in the results, ordered using a configurable criteria (e.g., ascending, descending).\n * An `atomic-numeric-facet` displays a facet of the results for the current query as numeric ranges.\n *\n * @part facet - The wrapper for the entire facet.\n * @part placeholder - The placeholder shown before the first search is executed.\n *\n * @part label-button - The button that displays the label and allows to expand/collapse the facet.\n * @part label-button-icon - The label button icon.\n * @part clear-button - The button that resets the actively selected facet values.\n * @part clear-button-icon - The clear button icon.\n *\n * @part values - The facet values container.\n * @part value-label - The facet value label, common for all displays.\n * @part value-count - The facet value count, common for all displays.\n *\n * @part value-checkbox - The facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-checked - The checked facet value checkbox, available when display is 'checkbox'.\n * @part value-checkbox-label - The facet value checkbox clickable label, available when display is 'checkbox'.\n * @part value-checkbox-icon - The facet value checkbox icon, available when display is 'checkbox'.\n * @part value-link - The facet value when display is 'link'.\n * @part value-link-selected - The selected facet value when display is 'link'.\n\n * @part input-form - The form that comprises the labels, inputs, and 'apply' button for the custom numeric range.\n * @part label-start - The label for the starting value of the custom numeric range.\n * @part label-end - The label for the ending value of the custom numeric range.\n * @part input-start - The input for the starting value of the custom numeric range.\n * @part input-end - The input for the ending value of the custom numeric range.\n * @part input-apply-button - The apply button for the custom range.\n */\n@Component({\n  tag: 'atomic-numeric-facet',\n  styleUrl: './atomic-numeric-facet.pcss',\n  shadow: true,\n})\nexport class AtomicNumericFacet implements InitializableComponent {\n  @InitializeBindings() public bindings!: Bindings;\n  public facetForRange?: NumericFacet;\n  public facetForInput?: NumericFacet;\n  public filter!: NumericFilter;\n  public searchStatus!: SearchStatus;\n  @Element() private host!: HTMLElement;\n  private manualRanges: (NumericRangeRequest & {label?: string})[] = [];\n  private formatter: NumberFormatter = defaultNumberFormatter;\n  private dependenciesManager?: FacetConditionsManager;\n\n  @BindStateToController('facetForRange')\n  @State()\n  public facetState!: NumericFacetState;\n  @BindStateToController('filter')\n  @State()\n  public filterState?: NumericFilterState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: SearchStatusState;\n  @State() public error!: Error;\n  @BindStateToController('facetForInput')\n  @State()\n  public facetForInputState?: NumericFacetState;\n\n  /**\n   * Specifies a unique identifier for the facet.\n   */\n  @Prop({mutable: true, reflect: true}) public facetId?: string;\n  /**\n   * The non-localized label for the facet.\n   * Used in the `atomic-breadbox` component through the bindings store.\n   */\n  @Prop({reflect: true}) public label = 'no-label';\n  /**\n   * The field whose values you want to display in the facet.\n   */\n  @Prop({reflect: true}) public field!: string;\n  /**\n   * The number of values to request for this facet, when there are no manual ranges.\n   * If the number of values is 0, no ranges will be displayed.\n   */\n  @Prop({reflect: true}) public numberOfValues = 8;\n  /**\n   * Whether this facet should contain an input allowing users to set custom ranges.\n   * Depending on the field, the input can allow either decimal or integer values.\n   */\n  @Prop({reflect: true}) public withInput?: NumberInputType;\n  /**\n   * The sort criterion to apply to the returned facet values.\n   * Possible values are 'ascending' and 'descending'.\n   */\n  @Prop({reflect: true}) public sortCriteria: RangeFacetSortCriterion =\n    'ascending';\n  /**\n   * The algorithm that's used for generating the ranges of this facet when they aren't manually defined. The default value of `\"equiprobable\"` generates facet ranges which vary in size but have a more balanced number of results within each range. The value of `\"even\"` generates equally sized facet ranges across all of the results.\n   */\n  @Prop({reflect: true}) public rangeAlgorithm: RangeFacetRangeAlgorithm =\n    'equiprobable';\n  /**\n   * Whether to display the facet values as checkboxes (multiple selection) or links (single selection).\n   * Possible values are 'checkbox' and 'link'.\n   */\n  @Prop({reflect: true}) public displayValuesAs: 'checkbox' | 'link' =\n    'checkbox';\n  /**\n   * Specifies whether the facet is collapsed. When the facet is the child of an `atomic-facet-manager` component, the facet manager controls this property.\n   */\n  @Prop({reflect: true, mutable: true}) public isCollapsed = false;\n  /**\n   * The [heading level](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements) to use for the heading over the facet, from 1 to 6.\n   */\n  @Prop({reflect: true}) public headingLevel = 0;\n  /**\n   * Whether to exclude the parents of folded results when estimating the result count for each facet value.\n   */\n  @Prop({reflect: true}) public filterFacetCount = true;\n  /**\n   * The maximum number of results to scan in the index to ensure that the facet lists all potential facet values.\n   * Note: A high injectionDepth may negatively impact the facet request performance.\n   * Minimum: `0`\n   * Default: `1000`\n   */\n  @Prop({reflect: true}) public injectionDepth = 1000;\n\n  /**\n   * The required facets and values for this facet to be displayed.\n   * Examples:\n   * ```html\n   * <atomic-facet facet-id=\"abc\" field=\"objecttype\" ...></atomic-facet>\n   *\n   * <!-- To show the facet when any value is selected in the facet with id \"abc\": -->\n   * <atomic-numeric-facet\n   *   depends-on-abc\n   *   ...\n   * ></atomic-numeric-facet>\n   *\n   * <!-- To show the facet when value \"doc\" is selected in the facet with id \"abc\": -->\n   * <atomic-numeric-facet\n   *   depends-on-abc=\"doc\"\n   *   ...\n   * ></atomic-numeric-facet>\n   * ```\n   */\n  @MapProp() @Prop() public dependsOn: Record<string, string> = {};\n\n  private headerFocus?: FocusTargetController;\n\n  private get focusTarget(): FocusTargetController {\n    if (!this.headerFocus) {\n      this.headerFocus = new FocusTargetController(this);\n    }\n    return this.headerFocus;\n  }\n\n  public initialize() {\n    this.validateProps();\n    this.computeFacetId();\n    this.initializeFacetForInput();\n    this.initializeFacetForRange();\n    this.initializeFilter();\n    this.initializeDependenciesManager();\n    this.initializeSearchStatus();\n    this.registerFacetToStore();\n  }\n\n  public disconnectedCallback() {\n    if (this.host.isConnected) {\n      return;\n    }\n    this.dependenciesManager?.stopWatching();\n  }\n\n  private initializeSearchStatus() {\n    this.searchStatus = buildSearchStatus(this.bindings.engine);\n  }\n\n  private initializeFacetForInput() {\n    if (!this.withInput) {\n      return;\n    }\n    this.facetForInput = buildNumericFacet(this.bindings.engine, {\n      options: {\n        numberOfValues: 1,\n        generateAutomaticRanges: true,\n        facetId: `${this.facetId}_input_range`,\n        field: this.field,\n        sortCriteria: this.sortCriteria,\n        rangeAlgorithm: this.rangeAlgorithm,\n        filterFacetCount: this.filterFacetCount,\n        injectionDepth: this.injectionDepth,\n      },\n    });\n\n    return this.facetForInput;\n  }\n\n  private initializeFacetForRange() {\n    if (this.numberOfValues <= 0) {\n      return;\n    }\n\n    this.manualRanges = Array.from(\n      this.host.querySelectorAll('atomic-numeric-range')\n    ).map(({start, end, endInclusive, label}) => ({\n      ...buildNumericRange({start, end, endInclusive}),\n      label,\n    }));\n\n    this.facetForRange = buildNumericFacet(this.bindings.engine, {\n      options: {\n        facetId: this.facetId,\n        field: this.field,\n        numberOfValues: this.numberOfValues,\n        sortCriteria: this.sortCriteria,\n        rangeAlgorithm: this.rangeAlgorithm,\n        currentValues: this.manualRanges,\n        generateAutomaticRanges: !this.manualRanges.length,\n        filterFacetCount: this.filterFacetCount,\n        injectionDepth: this.injectionDepth,\n      },\n    });\n\n    return this.facetForRange;\n  }\n\n  private initializeFilter() {\n    if (!this.withInput) {\n      return;\n    }\n    this.filter = buildNumericFilter(this.bindings.engine, {\n      options: {\n        facetId: `${this.facetId}_input`,\n        field: this.field,\n      },\n    });\n  }\n\n  private initializeDependenciesManager() {\n    this.dependenciesManager = buildFacetConditionsManager(\n      this.bindings.engine,\n      {\n        facetId:\n          this.facetForRange?.state.facetId ?? this.filter!.state.facetId,\n        conditions: parseDependsOn<\n          FacetValueRequest | CategoryFacetValueRequest\n        >(this.dependsOn),\n      }\n    );\n  }\n\n  private registerFacetToStore() {\n    const facetInfo: FacetInfo = {\n      label: () => this.bindings.i18n.t(this.label),\n      facetId: this.facetId!,\n      element: this.host,\n      isHidden: () => this.isHidden,\n    };\n\n    this.bindings.store.registerFacet('numericFacets', {\n      ...facetInfo,\n      format: (value) =>\n        formatHumanReadable({\n          facetValue: value,\n          logger: this.bindings.engine.logger,\n          i18n: this.bindings.i18n,\n          field: this.field,\n          manualRanges: this.manualRanges,\n          formatter: this.formatter,\n        }),\n    });\n\n    initializePopover(this.host, {\n      ...facetInfo,\n      hasValues: () => this.hasValues,\n      numberOfActiveValues: () => this.numberOfSelectedValues,\n    });\n\n    if (this.filter) {\n      this.bindings.store.state.numericFacets[this.filter.state.facetId] =\n        this.bindings.store.state.numericFacets[this.facetId!];\n    }\n  }\n\n  @Listen('atomic/numberFormat')\n  public setFormat(event: CustomEvent<NumberFormatter>) {\n    event.preventDefault();\n    event.stopPropagation();\n    this.formatter = event.detail;\n  }\n\n  @Listen('atomic/numberInputApply')\n  public applyNumberInput() {\n    this.facetId &&\n      this.bindings.engine.dispatch(\n        loadNumericFacetSetActions(\n          this.bindings.engine\n        ).deselectAllNumericFacetValues(this.facetId)\n      );\n  }\n\n  public render() {\n    const {\n      searchStatusState: {firstSearchExecuted, hasError},\n      bindings: {i18n},\n    } = this;\n    return (\n      <FacetGuard\n        enabled={this.enabled}\n        firstSearchExecuted={firstSearchExecuted}\n        hasError={hasError}\n        hasResults={this.shouldRenderFacet}\n      >\n        {firstSearchExecuted ? (\n          <FacetContainer>\n            <FacetHeader\n              i18n={i18n}\n              label={this.label}\n              onClearFilters={() => {\n                this.focusTarget.focusAfterSearch();\n                if (this.filterState?.range) {\n                  this.filter?.clear();\n                  return;\n                }\n                this.facetForRange?.deselectAll();\n              }}\n              numberOfActiveValues={this.numberOfSelectedValues}\n              isCollapsed={this.isCollapsed}\n              headingLevel={this.headingLevel}\n              onToggleCollapse={() => (this.isCollapsed = !this.isCollapsed)}\n              headerRef={(el) => this.focusTarget.setTarget(el)}\n            />\n            {!this.isCollapsed && [\n              this.shouldRenderValues && this.renderValues(),\n              this.shouldRenderInput && (\n                <atomic-facet-number-input\n                  type={this.withInput!}\n                  bindings={this.bindings}\n                  label={this.label}\n                  filter={this.filter!}\n                  filterState={this.filter!.state}\n                ></atomic-facet-number-input>\n              ),\n            ]}\n          </FacetContainer>\n        ) : (\n          <FacetPlaceholder\n            isCollapsed={this.isCollapsed}\n            numberOfValues={this.numberOfValues}\n          />\n        )}\n      </FacetGuard>\n    );\n  }\n\n  private renderValues() {\n    const {\n      displayValuesAs,\n      field,\n      manualRanges,\n      label,\n      bindings: {\n        i18n,\n        engine: {logger},\n      },\n      formatter,\n    } = this;\n\n    return (\n      <NumericFacetValuesContainer i18n={i18n} label={label}>\n        {this.valuesToRender.map((value) => (\n          <NumericFacetValueLink\n            formatter={formatter}\n            displayValuesAs={displayValuesAs}\n            facetValue={value}\n            field={field}\n            i18n={i18n}\n            logger={logger}\n            manualRanges={manualRanges}\n            onClick={() =>\n              this.displayValuesAs === 'link'\n                ? this.facetForRange!.toggleSingleSelect(value)\n                : this.facetForRange!.toggleSelect(value)\n            }\n          />\n        ))}\n      </NumericFacetValuesContainer>\n    );\n  }\n\n  private get numberOfSelectedValues() {\n    if (this.filter?.state.range) {\n      return 1;\n    }\n\n    return (\n      this.facetForRange?.state.values.filter(({state}) => state === 'selected')\n        .length || 0\n    );\n  }\n\n  private get shouldRenderValues() {\n    return (\n      !this.hasInputRange &&\n      this.numberOfValues > 0 &&\n      !!this.valuesToRender.length\n    );\n  }\n\n  private get hasInputRange() {\n    return !!this.filter?.state.range;\n  }\n\n  private get valuesToRender() {\n    return (\n      this.facetForRange?.state.values.filter(\n        (value) => value.numberOfResults || value.state !== 'idle'\n      ) || []\n    );\n  }\n\n  private get shouldRenderInput() {\n    return shouldDisplayInputForFacetRange({\n      hasInputRange: this.hasInputRange,\n      searchStatusState: this.searchStatusState,\n      facetValues: this.facetForInput?.state.values || [],\n      hasInput: !!this.withInput,\n    });\n  }\n\n  private computeFacetId() {\n    if (this.facetId) {\n      return;\n    }\n\n    if (this.bindings.store.get('numericFacets')[this.field]) {\n      this.facetId = randomID(`${this.field}_`);\n    }\n\n    this.facetId = this.field;\n  }\n\n  private get enabled() {\n    return this.facetState?.enabled ?? this.filter?.state.enabled ?? true;\n  }\n\n  private get isHidden() {\n    return !this.shouldRenderFacet || !this.enabled;\n  }\n\n  private get shouldRenderFacet() {\n    return this.shouldRenderInput || this.shouldRenderValues;\n  }\n\n  private get hasValues() {\n    if (this.facetForInput?.state.values.length) {\n      return true;\n    }\n\n    return !!this.valuesToRender.length;\n  }\n\n  private validateProps() {\n    new Schema({\n      displayValuesAs: new StringValue({constrainTo: ['checkbox', 'link']}),\n      withInput: new StringValue({constrainTo: ['integer', 'decimal']}),\n    }).validate({\n      displayValuesAs: this.displayValuesAs,\n      withInput: this.withInput,\n    });\n  }\n}\n"],"mappings":"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"}