{"version":3,"names":["atomicInsightPagerCss","AtomicInsightPagerStyle0","AtomicInsightPager","this","numberOfPages","radioGroupName","randomID","initialize","searchStatus","buildInsightSearchStatus","bindings","engine","pager","buildInsightPager","options","focusTarget","activePage","FocusTargetController","focusOnFirstResultAndScrollToTop","_a","store","state","resultList","focusOnFirstResultAfterNextSearch","scrollToTopEvent","emit","render","h","PagerNavigation","key","i18n","PagerPreviousButton","icon","ArrowLeftIcon","disabled","pagerState","hasPreviousPage","onClick","previousPage","PagerPageButtons","currentPages","map","pageNumber","PagerPageButton","isSelected","isCurrentPage","ariaLabel","t","onChecked","selectPage","page","groupName","ref","el","setTarget","text","toLocaleString","language","PagerNextButton","ArrowRightIcon","hasNextPage","nextPage","__decorate","InitializeBindings","BindStateToController"],"sources":["src/components/insight/atomic-insight-pager/atomic-insight-pager.pcss?tag=atomic-insight-pager&encapsulation=shadow","src/components/insight/atomic-insight-pager/atomic-insight-pager.tsx"],"sourcesContent":["@import '../../../global/global.pcss';\n\n[part='page-button'] {\n  @apply bg-transparent;\n}\n\n:host {\n  background: var(--atomic-neutral-light);\n  height: 100%;\n  padding: 1rem 1.5rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n","import {Component, Event, EventEmitter, h, Prop, State} from '@stencil/core';\nimport {\n  buildInsightPager,\n  buildInsightSearchStatus,\n  InsightPager,\n  InsightPagerState,\n  InsightSearchStatus,\n  InsightSearchStatusState,\n} from '../';\nimport ArrowLeftIcon from '../../../images/arrow-left-rounded.svg';\nimport ArrowRightIcon from '../../../images/arrow-right-rounded.svg';\nimport {FocusTargetController} from '../../../utils/accessibility-utils';\nimport {\n  BindStateToController,\n  InitializableComponent,\n  InitializeBindings,\n} from '../../../utils/initialization-utils';\nimport {randomID} from '../../../utils/utils';\nimport {\n  PagerNextButton,\n  PagerPageButton,\n  PagerPageButtons,\n  PagerPreviousButton,\n} from '../../common/pager/pager-buttons';\nimport {PagerNavigation} from '../../common/pager/pager-navigation';\nimport {InsightBindings} from '../atomic-insight-interface/atomic-insight-interface';\n\n/**\n * @internal\n */\n@Component({\n  tag: 'atomic-insight-pager',\n  styleUrl: 'atomic-insight-pager.pcss',\n  shadow: true,\n})\nexport class AtomicInsightPager\n  implements InitializableComponent<InsightBindings>\n{\n  @InitializeBindings() public bindings!: InsightBindings;\n  public pager!: InsightPager;\n  public searchStatus!: InsightSearchStatus;\n\n  @BindStateToController('pager')\n  @State()\n  public pagerState!: InsightPagerState;\n  @BindStateToController('searchStatus')\n  @State()\n  public searchStatusState!: InsightSearchStatusState;\n  @State() error!: Error;\n\n  @Event({\n    eventName: 'atomic/scrollToTop',\n  })\n  private scrollToTopEvent!: EventEmitter;\n\n  /**\n   * Specifies how many page buttons to display in the pager.\n   */\n  @Prop({reflect: true}) numberOfPages = 5;\n\n  private activePage?: FocusTargetController;\n  private radioGroupName = randomID('atomic-insight-pager-');\n\n  public initialize() {\n    this.searchStatus = buildInsightSearchStatus(this.bindings.engine);\n    this.pager = buildInsightPager(this.bindings.engine, {\n      options: {numberOfPages: this.numberOfPages},\n    });\n  }\n\n  private get focusTarget(): FocusTargetController {\n    if (!this.activePage) {\n      this.activePage = new FocusTargetController(this);\n    }\n\n    return this.activePage;\n  }\n\n  private async focusOnFirstResultAndScrollToTop() {\n    await this.bindings.store.state.resultList?.focusOnFirstResultAfterNextSearch();\n    this.scrollToTopEvent.emit();\n  }\n\n  public render() {\n    return (\n      <PagerNavigation i18n={this.bindings.i18n}>\n        <PagerPreviousButton\n          icon={ArrowLeftIcon}\n          disabled={!this.pagerState.hasPreviousPage}\n          i18n={this.bindings.i18n}\n          onClick={() => {\n            this.pager.previousPage();\n            this.focusOnFirstResultAndScrollToTop();\n          }}\n        />\n        <PagerPageButtons i18n={this.bindings.i18n}>\n          {this.pagerState.currentPages.map((pageNumber) => {\n            return (\n              <PagerPageButton\n                isSelected={this.pager.isCurrentPage(pageNumber)}\n                ariaLabel={this.bindings.i18n.t('page-number', {pageNumber})}\n                onChecked={() => {\n                  this.pager.selectPage(pageNumber);\n                  this.focusOnFirstResultAndScrollToTop();\n                }}\n                page={pageNumber}\n                groupName={this.radioGroupName}\n                ref={(el) => {\n                  const isSelected = this.pager.isCurrentPage(pageNumber);\n                  if (isSelected && el) {\n                    this.focusTarget.setTarget(el);\n                  }\n                }}\n                text={pageNumber.toLocaleString(this.bindings.i18n.language)}\n              />\n            );\n          })}\n        </PagerPageButtons>\n        <PagerNextButton\n          icon={ArrowRightIcon}\n          disabled={!this.pagerState.hasNextPage}\n          i18n={this.bindings.i18n}\n          onClick={() => {\n            this.pager.nextPage();\n            this.focusOnFirstResultAndScrollToTop();\n          }}\n        />\n      </PagerNavigation>\n    );\n  }\n}\n"],"mappings":"meAAA,MAAMA,EAAwB,8ruCAC9B,MAAAC,EAAeD,E,iXCkCFE,EAAkB,M,8EAuBNC,KAAAC,cAAgB,EAG/BD,KAAAE,eAAiBC,EAAS,yB,mGAHK,C,CAKhC,UAAAC,GACLJ,KAAKK,aAAeC,EAAyBN,KAAKO,SAASC,QAC3DR,KAAKS,MAAQC,EAAkBV,KAAKO,SAASC,OAAQ,CACnDG,QAAS,CAACV,cAAeD,KAAKC,gB,CAIlC,eAAYW,GACV,IAAKZ,KAAKa,WAAY,CACpBb,KAAKa,WAAa,IAAIC,EAAsBd,K,CAG9C,OAAOA,KAAKa,U,CAGN,sCAAME,G,aACNC,EAAAhB,KAAKO,SAASU,MAAMC,MAAMC,cAAU,MAAAH,SAAA,SAAAA,EAAEI,qCAC5CpB,KAAKqB,iBAAiBC,M,CAGjB,MAAAC,GACL,OACEC,EAACC,EAAe,CAAAC,IAAA,2CAACC,KAAM3B,KAAKO,SAASoB,MACnCH,EAACI,EAAmB,CAAAF,IAAA,2CAClBG,KAAMC,EACNC,UAAW/B,KAAKgC,WAAWC,gBAC3BN,KAAM3B,KAAKO,SAASoB,KACpBO,QAAS,KACPlC,KAAKS,MAAM0B,eACXnC,KAAKe,kCAAkC,IAG3CS,EAACY,EAAgB,CAAAV,IAAA,2CAACC,KAAM3B,KAAKO,SAASoB,MACnC3B,KAAKgC,WAAWK,aAAaC,KAAKC,GAE/Bf,EAACgB,EAAe,CACdC,WAAYzC,KAAKS,MAAMiC,cAAcH,GACrCI,UAAW3C,KAAKO,SAASoB,KAAKiB,EAAE,cAAe,CAACL,eAChDM,UAAW,KACT7C,KAAKS,MAAMqC,WAAWP,GACtBvC,KAAKe,kCAAkC,EAEzCgC,KAAMR,EACNS,UAAWhD,KAAKE,eAChB+C,IAAMC,IACJ,MAAMT,EAAazC,KAAKS,MAAMiC,cAAcH,GAC5C,GAAIE,GAAcS,EAAI,CACpBlD,KAAKY,YAAYuC,UAAUD,E,GAG/BE,KAAMb,EAAWc,eAAerD,KAAKO,SAASoB,KAAK2B,eAK3D9B,EAAC+B,EAAe,CAAA7B,IAAA,2CACdG,KAAM2B,EACNzB,UAAW/B,KAAKgC,WAAWyB,YAC3B9B,KAAM3B,KAAKO,SAASoB,KACpBO,QAAS,KACPlC,KAAKS,MAAMiD,WACX1D,KAAKe,kCAAkC,I,GAtFpB4C,EAAA,CAA5BC,K,+BAMMD,EAAA,CAFNE,EAAsB,U,iCAKhBF,EAAA,CAFNE,EAAsB,iB"}